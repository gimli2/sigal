<?php
  

  
    if (isset($_GET["static"]) && $_GET["static"]==="favicon.png") {
      header("Content-Type: image/png"); header("Expires: Tue, 1 Jan 2030 05:00:00 GMT"); header("Cache-Control: max-age=8640000, public"); echo base64_decode("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAAK/INwWK6QAAABl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIZSURBVDjLpZPPS1RRGIafe+feSccfacxACUFYDGaKlEmrqFVEi6Bdy7YmLqL6A1oEtQiCglZBtYhKKqiEFiGRUERQthhEjKi0UNSbkk73zjnfd1pMM2VpBB64i8OFh/flOa/nnGMtx7tzoq3g1HnqHKoOVUXUIaqoOkTK9+PXJtpXAgSq6vV0dyALBuOKWJdgBVSUb0lAfWMDz1++XjVBIOKMiebC8x2P8DxwDqxV5qOY6aklLtOHFf0HQNUPvVpMSfB9D3WOg0MH8iqKqPJeF8k113G9d+vMCrVygRXFqvI1igkCv/xThJ1dbdgFQ5qI2CzheakVawXWKsYIM9NF/JSHqqMkvitFkde7Z5I6r4i1isukqQnWka1t5uRjrdYKrIjGkDo1eWi7U0fFxuh4RN/Y7zaKWdElxs7mZ0OdwIpUABoOjxTYlGvk/2y0YIxg7XgZ0H/jczvAzf58YqK59LH2e2wJN5Cx8MnAlZ4L7M5+5NWld1hRMnWGIFisVvArOio2Utmj3He7iC1kgSdf9rNoNhNqhBXhyMAoSRIj+gegYqOplKGrYZ6p5jzWv8tAoZuGW6cxpgVrlcGHbxgcfotIeQJBFfDTRseO9XTW91HDDCPfz5Ekt2lt2kZwsRz7zIP53LKH9CuBaAwcvjqFF87Sum8je+nkw7MJCF6QJFKNvQpA08MjBUQVEcfToeWjqnx/rXGtc/4BfOeC6F88S7oAAAAASUVORK5CYII="); exit;
    }
    
    if (isset($_GET["static"]) && $_GET["static"]==="lock.png") {
      header("Content-Type: image/png"); header("Expires: Tue, 1 Jan 2030 05:00:00 GMT"); header("Cache-Control: max-age=8640000, public"); echo base64_decode("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAFVElEQVR42rWWC1BUVRjH/3d3YVlWQEFQhsk1YHch8W0zWQ2ggMpjN9MixxzTUnsoig8GTc2LkcCAri5ZOZivyWJsTAMRh8SEmR4zaUliyjPAIc0HKgq7K+y9fXeXnCKXezE5M/+Ze873nXN+5zuP+zHoX3mCNJv0LGkkaVBP+z1SE+l70mHSZakDMhL9gkg5pDl+fv7yiIix0Gg08PL2dhjb29vR0tyM6uoq3Lx53U5NhaR0UuvjAJhB+lyjCR6y8I0lSEpMRFDQcKjVKshkMocDx3Ho6LCgtfUqSkqOY8+nu9Dc3HiLTHNJJ/4PQJIQ0unxRvcVqasRGjoSnp4qh8Fut4Ozc44R5HL5A5jOTgvq65tg3r4VJ0qL7vds2bFHAQgl/TwjYabXqjVpGDEiCAzD4PaddvxBK62rrUFbW5vD0dfXF1qd3hEZn8E+4CkiLS2tMOXlovT40bvkMp7U0F+AkuAQfUJO3g6E6oJptXY01P+OA/v24NTJUlppx7+cPT3ViImLx/yFixASMhIMRaS+rhHpq1egsaHmOLkk9gdgnLD69PWZTHxiPJQeStTV1COTXY/amgs3yLYJztP+Z4//sJ5QZ+j0o4Zu3JwFrTYYVqsNpSWlyPlgA0+2CaRzUgGyAoNGrM3KNeNJWs2ttlvIN21Fedmxa2SbTGp00S+Y9EPsdEPAMjozg4f4oKXpMkVhKa60Xs4m2zqpABXPRcZGpqxMg3+AHy5UX0Ta8sWw2ayLybYbfZdFSqVHQa65ADq9FpbOTuRlb8F3lScryRYlFaDJMGuuZu781zDUzxfFXxfDnLdZaA8gXRcB8CddS1m9EVNiY6BSuuOj/HwUH/miGc7HSxLAlReT5w+fmfwKNEGB2LtnH/YXmPvy7134ea8vRYLRiMBhQ2E27cCRQweuUnugZADDrFeHG2a9hIljwrHNlI+De3f2CyB53hLEGwwYE64Fy76P4q8OSgLwJaWS1kwzJKumJxkxO2Eq1q7PQOGBXYL9qESAmS8kL0BcfAKSYp/HkndSUVZ8yELteaTtpLaHAahJZ/QhCJs2FdCFRyBYq0dc1DP4rPAwqs7+KHFuZwmLmEDvhw5Rkydi1+79qL1YjbJTQE0DLpF5EqmjN8Ai2q6COjqrXup+zSW53KUptZH0eNzAg9v0T4BNUU+DPb2PvroHBgAKIHoB3fGfwFIt478AEwlA2Gr7AAHICeBNAjjrCmA8AXxIX9wAAdAPM3oZAfziCmAcAewYYIAVBHDOFcBYAhAuCS8+Fq9m0GBzOoYoGTAdEjrRbNF0ySuq+gIwiQPwlBd8ecYNc9LvO+qFOe54eVIXGF6kowCwUgxgG03A9f3g8ZwCqTvlyC+yOuopRg9sX2qnHKDv68PIeESv6gtgDNhvc2UQe3GFhdZe8kbilnZHveRdb+jC2iljEt04TEnjUPGrK4DRDHsqy40Oi/gp5K3ueMvk/P6Ewsp43BftA06Gqeu6UHGedwEwSsaWZyrBuIk/BBwBvG1y7vnHKxnIJADwXXLEbLCh4gL3cIDIp+RsOasCoxR/CnmrG4rKlY5vY4yNItAl3semQAxrQeVvdhcA4Qr25IZBkKkkrIanrt3OVBwKjvZf/BpyFnfEZt5D5cVuFwBhCvabtT6Qq22igz1KsXcoEZd9B5WXXAHo3diytMGQeVklZx5SixAf7q4HpuXeRmVN10MBUjR+cnN1hj/clAPzFnfZZIjYdB3NN+3LqZrfG0BIJqujdcoA41gVFLLHO3k3ramoyoLTtTYhtY9AT3LbO9JakpD+jobj5/lYi3C3z5PeI9X93fgXOR3hMOHCmcoAAAAASUVORK5CYII="); exit;
    }
    
    if (isset($_GET["static"]) && $_GET["static"]==="defico.png") {
      header("Content-Type: image/png"); header("Expires: Tue, 1 Jan 2030 05:00:00 GMT"); header("Cache-Control: max-age=8640000, public"); echo base64_decode("iVBORw0KGgoAAAANSUhEUgAAAHgAAAB4CAMAAAAOusbgAAAABGdBTUEAAK/INwWK6QAAABl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAMAUExURd3KzIQoKJk0NZ5BQrJscfHq6ubV1iEhIdnDxb2Ii6BFReri4sSRmNrFxfr4+ff19bqChDQjJPb29uvk5OTO0pY0NBEREZd1drZ4ebuEhsmjpOLOzzAwMOHR06laXuzm5i4uLryHiaVQUc6trFMmJ1hYWPj29z8/P+7p6aJLTAAAAOre3ngkJL6KjLyGhngrLLmAguzh4YgsL/bz9KNMUPLv7pcyMrp8g2AoKZo5OrV2dq5la65gZpgxMlVKS6hVWtzGyHUkJJcuM+3t7a9qbJgzM6NNTeLU1NjCw8WansGPk/by8q1mZZ0/P9e8v/Hs7JgwMOvl5d7Gx9GxsaVRVbJvcrZ0esigo9Gytv///8ieoqJKSu3o6O/j5cGQkNa+v7Z5fPHu7sednvLs7NO3tuzk5EAkJefZ25gwMuDJygoKCrh9fikiIta8vJcwMJs8PtW6u6FHSIMoKs2srKBISJguMrBtbateYJ09QPj39/Xy85cuLvPx8biAf8KSlOXZ2QQBAd/Oz7d8fNO3uNe/wGgpKps2OMOWlxgYGJY0NUpKSocsLZcuLygnJ0klJpcuMJguMIMoKAUFBZeXl5guLlxcXJcvL/Dw8E1NTaamppgvL8TExOHh4fr6+mtra3p6epguL5guMf39/fn5+YmJiYMoKf7+/vn4+NPT0/z8/Pv7+/z7+/Pz87W1tYMpKfj4+JgvMP38/I8tL+3n6JcuMZc1NUNDQ5cvMuTX2O/q6pw7PpcvMJU0NOrf4OXa2+ja2pYvOKJJS0s+P9zDw9G0s4QqKpgvMnAiIpEwNMumpuLR1cigoODc3JYzOuje3/Lv76RPUIAoKMienerj49a7v398fOjg3/Pu7pcvLvz9/P39/JFDRZ9ESfv6+vv6+/b09JYvL8+wr9vIx7N0c7Rwd+ba2Zw8O9m+vuzk46thYL+Ojq1kZNCtsuXa2ebb3OfZ2e7m5ufa2sSXmZcwMs6rqs2rrqSkpPTw8Pbx8kQtLta9voErLqZTVPr5+YV6e////3/42SEAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAANDElEQVR42rSbC3wUxRnANwl4gkVAjSVy8hIbOAGlIOVh1MvPAFKp4qN4gqBikQJFg4SHU3TRiiCDc2v27pIQk4uEiPAzIppK1T5si33YKi1ttU9rbe2DPunDtpDSee7O7M3e7a74/ZK7zeV2//t9880333wza5wILbGEV5aHv8gJI+wJiYTZfbB7V5lVZllWWVnZ6mMHD5oR4GHAIxKmaSbLLAAABBBC8orSCALLSiZNTP9AwISatCDMMyDlEkFpcoA/ssaFYgcDV1Mq1hSrRwW6Lw2IHZHfEHoHAW9JMKoLcIRqK30Iqd4nB0yUpddUiMp9QOU2rEDoUuDlpmmpsOfFAZSA4s7YURB0cXA8wbSVpcXD0wgMgDaKWzmpszHTDEKt+ZnuECbNxPkRwWebZpnoNOKV21P0KOSvNNyVLKq0UUxdJC6PoKMJe2VdGOocDopvwtXFyH7g7aa567k0Qoi8QK4nvQ/0CoK2bQNgq00t7sK9u/TqIi1t+Jk5yc1Z+5XvIh4iIb8mqFs/+bJL+nzyY7/uc8llk+983uNqks5wnC/ZKOJV7BrLahCPzBDaAP3sig994qybJz2TYnL6pJvP+sGcGRUuEgqtKXmXH9nQc3dBwO2FaJxkdnx+3U3fXiKQsjzZd9PRYURziOQ4Tk73IxtaruX0FtxSHWkyAtlw8vw7elP+cvodV9YDO898DqbT7Je4mBkQjLm82/CRD4u9bMapk1Kl5N+zZ+Cz8G0izEQMjA+1ZEPPlUIwxfcZujcVRH5x7hVSfxPm1pENnZ2hEoQAWHduMCyRvcYwehbthIiBkaadDa2+wPVMACtuPD0VRjb8cT32R9JC+xCiB2kN2dD4FVAiwy19U2FleB/c75CIbohEvgKy4YkblicC1t24NxVeHvvn34EYNcVImSgCjquDID5l1GupaPKll8XQxV+9/VkBJwoG3xueiAhOXX0D924e9V5Mmr7ghCm5Fb/ZIRuikp8YBNIk9LidKuED3oIdGhYkNbdEJj82HgguKBwlJTBu4BeBCNE8XsL3Q94zB+uMGJyEv9Vmkw4sDA2khqGHKyK3855+ABFz72O9Co1L6MBOT5KiJQtcF0Um7xxCyKxL494sG9sBJ8Z5I4eb2F20Myr5nmE2Hizybl5QCDaduQLRssWZodCMblBkneett9NklOJe5qpseLowi89g9lE31yG/ROcYkUZ+QXLMD3PNbU2xWHWmsVVHNminogZHJCHxgEeYSp54b2rPeGV4A4N2MnC81Qt+Kh4T0qkBdz3EujOiMdvtzIZQWM7Vrp9EeyFgCSwjV+1kF2/3gNtjkjTlCslvXW/zOIJfWhyVGbjadEd9nNJtEv1fNA3JQar4xXco4E4GbGxsogcZjc6bAKJmThNxVDY8QZqatUtEHj73JrNvaHNwRgbvoOan97KDmrxZY+wqQNMgavC0ZUrgh015+rt5oYh5/ZxmJu4h7NksgTOuDdhNVGtUXrg5j9JMa5KBJVwwVlgMDPj1HDfa9gP0BJq9IaJttbg2A7eStzbx9XbpLhSZD4RX59MifBmiDzsB+oVbUx5ymrUOvupX/yW6FAM3krenxLefkvubLLe+wBUg/DIWsRnYHY0guEkZYfrZMjg2p4l3KQamruV035yivyxX2jTdhRTNVDY8rgXKv6Cc0jsS5Ml9Ytcgl4Uf5hdn4IwUR7gZdH6denYZzf0gzbnLHLCbaGFwP++oOpIFAAautS9lDRkOnKqyacrH4yYHjzDlHHqW95zeCTYd2xi4dtt20m9TTZTYRj7LKaZu14LPBWkeFPANJBMMzC1NXevNywqHg94JAHGvjjV0pKfSLpUJ41w41z5u550syBJgSxqW5utGVZo9UY3J+1LSpRh4h6Ij7U679aPUbXbaCfw0bBqkiXlAxnqBP2vH8yrQwcANHc/VHhORBP+nOkgAIXIAzyNZCCGNvJyAcRM7iaA96iPa03qrQEMHN3WaGZuBmwOETDZUzLSRMyyTRjbYwCRmpSN9zusdBJAwdRoNdsDMvcggQR1c34upXGSz0CuBLWf2D8Fi3+xpEBBgiC50wbkmeVjM5HzBd9lu/kgGCmMLjZc881h2gX/etpGC6XieHx1zO3Cng403FsmB/raMjQb0hYAT3QAgkdiNLTLrf4JcG6XpALd/sBQ5WhszuHmb2ppzxZKv9+qljAZ7l5E4KGWUN3QVm5OssNNsUsJCzX9DZX3PHAEQSt5lJFY7+SSw7y0+G7ofD295t+C1OBR5glSNGkfA46a45OuKn/v0/WS+zb5K6kqzw4C/xc4lPy3fIOCyusqszSP1gFJVhlvY4oAozIchL3YK2lO2fo+ALZB9qZJxp1xb6uynh7ilS+KTpwYHf417UransqWMgQGo21pDPis/pXRlZboof7FkPzj503W0zF7ZswqQYYKBQbayB89a6iYGqOkMseVEPxuY/JdyfLs1PRTvggGo2VwJyv8a4ALvzZQ6ZB7sGxAQ/OVybOWeLPCCQUtP3bQxgYpJY4GbTaDA5AvKa3pEB3LAzGGydy5MBSRDMeVFCCy7PBh42hRnDqpoTJxrYrCbH74ASMsDoCaQzqeUu6AC8CkB22t4PZ8P8ej5QDCvRryqA73gVdcGddF5a2xeYWDR867Sp1wL+MICgAVgMCBwr5y3gGT6TvQMMGI84CyXADZIWNLodF6IGsPLeFrCoic9ueSIcZuoIpFV14Q7LNJwtMj7bSVh3d1JBt5YppNmkvPqt01dujIWWzr6wjxZufgcL1Y0F9QqeO4DHK4CprL2cX/w7ow78adJzw+dv5duY+NzTMozveA96yQOSQSUSvGaj/uCm6XUqtGbbK08Rgy+WJo/F4CXzJVWIk2W7NmOsVd90Q/MudWZDDY3MTXlrhw9dfRKerCfXDUmqewF3yeVzywOlmxwlw+4lSWvbEZKuHTy0vSdQwDtJzOL2GiSBGpKBo68DZzlZRI/MPhsqdIEqnzA7Z75WI54WXUuNeYQgCzz24bY7EotGbiFkOkSheXVJ2Tw2IFacKt3dtIsNBszCsAHyR9T8bwbv11azf/hAb8+V/UtNneSPjugBTd7Zyfu/HThKLCfejakE9ml/+O36AEbniZ2Z4tcjmrBasmBu1YTn+3PtImtV/L55DdHsHv0gMfLCyN8mqo08qEzdOCM11Xkuf/CyUv57Ia8vUKmdPGcB/zZuZ4m9pQisGwKDU49+x8J3EB9rdEDni2vsJgCrNh6RZcG3OY1ddw1NZaH8V+D0yhPvtVR+yBVuUkG/2StRCgTNRDV1quGa8CNXufKyMUPWvt4BPHyTG3tYLdWweU14LW0W2Bz5CENuGCyr9wJ9fmpHNzQ0HChW6sQRR/F0m6BTbG1UugSAaTaE0BYx2Yq5+g/fwqQUyV5xC0ZUDncUqAwA2+Xba2oLMAsVGd2OCGz3SlP56jZ23EGWEvBHQ0dH1XBXRMKXMspG8sq152pGSTa5EGilcfMWLy9sT3OlR8+lhaWOxoaOtBUBfwnmauUjU88qqg8/clCcC4jjYKksrU7Ln0Q301zEqdKsn+lBH7sSKFrOUsD6vLtAF0i0BhXxuNUq3srbayx55HjfZT8oAS+XVX4fHVNQlF5zeu61IettmBrd/IevaMTs+POn+zbtOKK8nTEOo0Gtnd1CjvLP6rKVT+Otsp0uJ5kvaROksd8UH84lfr5O7oWltadFJVD1jckcn87zYrxdPpff2bqbqBxac1KG5ea+yKST6uwaZ2EJ1jH7y5XDK1Z4kuo5DVXRyQfqAD+olvUVPsyAFcNjEjGkcRPkgn9wrWlLKdOj7pgjeeSerHMz2vBHmOD+yOT15Q0tH5zghPBzoi6dtu/lKE92zG820+uuDgi+cx6Ddcc4b8PxEue+aOo1h5V2MBFNqAUkjfP7ooE7lpUglt0kxGVRW9F4F680btTtcQmIx35+Kyw2Cd/1b+oQ/ttJPOelF10ayjumI2FHckMtHWu4Ly55wW395JXp2kcOuhmwYJTF3x9UiCfuvqcCl1HSoTYHilvRWnBWeLYVz/1eKnter/5w7u6gKXdmemzIVTRua7nGpr3vvOZvv7svb+77qosdoi6FnUrmhViQ6hKzm6tzIrjaWv/ceCNwr10e/rO+v6RcnGXNew0ZqvuUFtgJXK20sWyS/X//fjbfzt04huTBm4YeE/fiUMHvD1h3VxJzWvYGdk3syCbTYbc9Eu37Hdns4BWegvlmvLN71b0X9C/Ylp5nXRf/HCVOMlKht7mzJTG6raAgCKHqZbKl7IsTJ4fZSt7wlQWw0LJLyvruqNuZffp0UElWeKxAaPUMyHR0O/zcQXmZNYHgA34SIp10rHBHsIh6KBsK3nSHsKhm4GDsSl1y0l+0Kokm1KDP2AW5tEywsbwQrpFoGa4x9rCPkx3Nn2Y7qDlSjd9mC70g3yhn+KjbI88GuHxwf8LMADv53L9l2Ct+gAAAABJRU5ErkJggg=="); exit;
    }
    
    if (isset($_GET["static"]) && $_GET["static"]==="defdirico.png") {
      header("Content-Type: image/png"); header("Expires: Tue, 1 Jan 2030 05:00:00 GMT"); header("Cache-Control: max-age=8640000, public"); echo base64_decode("iVBORw0KGgoAAAANSUhEUgAAAHgAAAB4CAMAAAAOusbgAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAGBQTFRFOtAq/9RP/f7+d2Mboefs/9dS87cV/9tBzNKXiuGCetNJy6k7sZMx3+Xh0NDOl34p/+BUzdNJq8Cs6tJyuOm8ua1z7u3s1sV24LlC78hJ59VVyunw9tFWw7yG2sFiAAAARZRzcgAAACB0Uk5T/////////////////////////////////////////wBcXBvtAAADKklEQVR42uzbW5uqIBQGYHBc5jSDOqEmqfn//+UGlA6TmJjCfia+iznc9LKWQFSGOkdBHvbwnBA3cEIC4gBOSFmWgXVYsjzELtyz8odNeGDrsF5SMnqZDcN4SckL4aQMFBvmER9DkNiA+xlVUybcMGbhgpLRkmpVkyMqYHqSVznZGCZ3TY7Duq6OYWg+vdCSaqUqwkcRlAf+R228iSDzKVXTUxznOccCGTkE45LRgpkcnxmjg8oTt0tKRobVyvJUrUH+mQcBjc4LSkbG1/ZG3SP0yS9yFDFZcrk6LKuVE7ke0FKqPHv+D4vEujJcUciAVSqvFV1CRK+jKDctGc1pMiF1rTp8qXVILnvNF3Rotm+ipyzhKcdq7cMvclDJXpuVjJ6y5YQqUspe0/5JKlkD5k98V7UcV/tex6LVsXiSIq/D/VnqmYrUgspDw14j7UwO5qjDgqq+ho1lfsm/4Q+RYrY69JoeJJzzefgCnCYXdf9U/WlODUCjggGwihmcFsl8VcBYE8hMYLVgyTyV56SH07mw6jD5nKvymQVaGNKP++jguuT7Yp0bqNNw9v2hyS18wEBlfh6yH8+TS4xxVk25F7jZ9fnVLhhmKf8F9znJNFNwes0UjFcPZMMgsy+r8LU7E3C3RcXXrr8fXLmCsSuYvRsMTfqwZSsYA96y5G89jD38N+AvLUy3hZkWjneO4NbDK58JUjfwzXrq7FashwsPb3X4eYAzS1vXw2unnSsYO2r1xjCw1A183UFsV+wc7t4Fvhx+7MPMFVx52BKsDj8jMGy8nt4O7ls98l5mAza2rs56xcO07qzPag/bg4FpYLo1LBfyCLztK3O1kP8nuP2rsDz8dE7g6u0q1sCFjVY7gcW0HoUzR3C3OYw1MP6zMD/8OIH5ehr94JoP6eFj3NUX8mjF0JzP52NzHcBu5YHo4Lsc6A7zYRypXAdY+C83RNPq6bQ7YIUaSP84qiEw91wMbIVbYDHuzkXbHm8eVo1D2xeAbe6hL/hA+AXqb4Dhi6cfyGU8ABm2c/N+0R5ijBsmxyHuF8ggdfKtgTRN/fckPOxhD3vYw7PyT4ABAOMHOFy5GSI3AAAAAElFTkSuQmCC"); exit;
    }
    
    if (isset($_GET["static"]) && $_GET["static"]==="info.png") {
      header("Content-Type: image/png"); header("Expires: Tue, 1 Jan 2030 05:00:00 GMT"); header("Cache-Control: max-age=8640000, public"); echo base64_decode("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAAK/INwWK6QAAABl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAKcSURBVDjLpZPLa9RXHMU/d0ysZEwmMQqZiTaP0agoaKGJUiwIxU0hUjtUQaIuXHSVbRVc+R8ICj5WvrCldJquhVqalIbOohuZxjDVxDSP0RgzyST9zdzvvffrQkh8tBs9yy9fPhw45xhV5X1U8+Yhc3U0LcEdVxdOVq20OA0ooQjhpnfhzuDZTx6++m9edfDFlZGMtXKxI6HJnrZGGtauAWAhcgwVnnB/enkGo/25859l3wIcvpzP2EhuHNpWF9/dWs/UnKW4EOGDkqhbQyqxjsKzMgM/P1ymhlO5C4ezK4DeS/c7RdzQoa3x1PaWenJjJZwT9rQ1gSp/js1jYoZdyfX8M1/mp7uFaTR8mrt29FEMQILr62jQ1I5kA8OF59jIItVA78dJertTiBNs1ZKfLNG+MUHX1oaURtIHEAOw3p/Y197MWHEJEUGCxwfHj8MTZIcnsGKxzrIURYzPLnJgbxvG2hMrKdjItjbV11CYKeG8R7ygIdB3sBMFhkem0RAAQ3Fuka7UZtRHrasOqhYNilOwrkrwnhCU/ON5/q04vHV48ThxOCuoAbxnBQB+am65QnO8FqMxNCjBe14mpHhxBBGCWBLxD3iyWMaYMLUKsO7WYH6Stk1xCAGccmR/Ozs/bKJuXS39R/YgIjgROloSDA39Deit1SZWotsjD8pfp5ONqZ6uTfyWn+T7X0f59t5fqDhUA4ry0fYtjJcWeZQvTBu4/VqRuk9/l9Fy5cbnX+6Od26s58HjWWaflwkusKGxjm1bmhkvLXHvh1+WMbWncgPfZN+qcvex6xnUXkzvSiYP7EvTvH4toDxdqDD4+ygT+cKMMbH+3MCZ7H9uAaDnqytpVX8cDScJlRY0YIwpAjcNcuePgXP/P6Z30QuoP4J7WbYhuQAAAABJRU5ErkJggg=="); exit;
    }
    
    if (isset($_GET["static"]) && $_GET["static"]==="download.png") {
      header("Content-Type: image/png"); header("Expires: Tue, 1 Jan 2030 05:00:00 GMT"); header("Cache-Control: max-age=8640000, public"); echo base64_decode("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAAK/INwWK6QAAABl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAH+SURBVBgZBcE9i11VGAbQtc/sO0OCkqhghEREAwpWAWUg8aMVf4KFaJEqQtAipTZWViKiCGOh2Ap2gmJhlSIWFsFOxUK0EsUM3pl79n4f12qHb3z3Fh7D83gC95GOJsDe0ixLk5Qq/+xv/Lw9Xd+78/HLX3Y8fXTr2nWapy4eCFKxG7Fby97SnDlYtMbxthyfzHO//nl85fNvfvnk8MbX5xa8IHx1518Vkrj54Q+qQms2vVmWZjdiu5ZR2rT01166/NCZg/2PFjwSVMU6yjoC1oq+x6Y3VbHdlXWExPd379nf7Nmejv2Os6OC2O4KLK0RNn3RNCdr2Z5GJSpU4o+/TkhaJ30mEk5HwNuvX7Hpi76wzvjvtIwqVUSkyjqmpHS0mki8+9mPWmuWxqYvGkbFGCUAOH/+QevYI9GFSqmaHr5wkUYTAlGhqiRRiaqiNes6SOkwJwnQEqBRRRJEgkRLJGVdm6R0GLMQENE0EkmkSkQSVVMqopyuIaUTs0J455VLAAAAAODW0U/GiKT0pTWziEj44PZ1AAAAcPPqkTmH3QiJrlEVDXDt0qsAAAAAapa5BqUnyaw0Am7//gUAAAB49tEXzTmtM5KkV/y2G/X4M5fPao03n/sUAAAAwIX7y5yBv9vhjW/fT/IkuSp5gJKElKRISYoUiSRIyD1tufs/IXxui20QsKIAAAAASUVORK5CYII="); exit;
    }
    
    if (isset($_GET["static"]) && $_GET["static"]==="1px.gif") {
      header("Content-Type: image/gif"); header("Expires: Tue, 1 Jan 2030 05:00:00 GMT"); header("Cache-Control: max-age=8640000, public"); echo base64_decode("R0lGODlhAQABAPAAAAAAAAAAACH5BAEAAAAALAAAAAABAAEAAAICRAEAOw=="); exit;
    }
    
    if (isset($_GET["static"]) && $_GET["static"]==="close.svg") {
      header("Content-Type: image/svg+xml"); header("Expires: Tue, 1 Jan 2030 05:00:00 GMT"); header("Cache-Control: max-age=8640000, public"); echo base64_decode("PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZlcnNpb249IjEuMSIgd2lkdGg9IjIwIiBoZWlnaHQ9IjIwIj4KCTxwYXRoIGQ9Ik0xIDUgTDUgMSBMMTAgNiBMMTUgMSBMMTkgNSBMMTQgMTAgTDE5IDE1IEwxNSAxOSBMMTAgMTQgTDUgMTkgTDEgMTUgTDYgMTAgWiIgc3Ryb2tlPSIjZmZmIiBmaWxsPSIjMDAwIiBmaWxsLW9wYWNpdHk9IjAuNSIvPgo8L3N2Zz4K"); exit;
    }
    
    if (isset($_GET["static"]) && $_GET["static"]==="error.svg") {
      header("Content-Type: image/svg+xml"); header("Expires: Tue, 1 Jan 2030 05:00:00 GMT"); header("Cache-Control: max-age=8640000, public"); echo base64_decode("PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZlcnNpb249IjEuMSIgd2lkdGg9IjY0IiBoZWlnaHQ9IjY0Ij4KCTxjaXJjbGUgY3g9IjMyIiBjeT0iMzIiIHI9IjI1IiBzdHJva2U9InJlZCIgc3Ryb2tlLXdpZHRoPSI3IiBmaWxsPSIjZmZmIiBmaWxsLW9wYWNpdHk9IjAuMiIvPgoJPHJlY3QgeD0iMjgiIHk9IjE3IiB3aWR0aD0iOCIgaGVpZ2h0PSIzMCIgZmlsbD0icmVkIiB0cmFuc2Zvcm09InJvdGF0ZSg0NSwgMzIsIDMyKSIvPgoJPHJlY3QgeD0iMjgiIHk9IjE3IiB3aWR0aD0iOCIgaGVpZ2h0PSIzMCIgZmlsbD0icmVkIiB0cmFuc2Zvcm09InJvdGF0ZSgxMzUsIDMyLCAzMikiLz4KPC9zdmc+Cg=="); exit;
    }
    
    if (isset($_GET["static"]) && $_GET["static"]==="loading.svg") {
      header("Content-Type: image/svg+xml"); header("Expires: Tue, 1 Jan 2030 05:00:00 GMT"); header("Cache-Control: max-age=8640000, public"); echo base64_decode("PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiBzdHlsZT0ibWFyZ2luOiBhdXRvOyBiYWNrZ3JvdW5kOiBub25lOyBkaXNwbGF5OiBibG9jazsgc2hhcGUtcmVuZGVyaW5nOiBhdXRvOyIgd2lkdGg9IjY0cHgiIGhlaWdodD0iNjRweCIgdmlld0JveD0iMCAwIDEwMCAxMDAiIHByZXNlcnZlQXNwZWN0UmF0aW89InhNaWRZTWlkIj4KPGcgdHJhbnNmb3JtPSJyb3RhdGUoMCA1MCA1MCkiPgogIDxyZWN0IHg9IjQ3IiB5PSIyIiByeD0iMyIgcnk9IjMuNiIgd2lkdGg9IjYiIGhlaWdodD0iMjQiIGZpbGw9IiNiZGJkYmQiPgogICAgPGFuaW1hdGUgYXR0cmlidXRlTmFtZT0ib3BhY2l0eSIgdmFsdWVzPSIxOzAiIGtleVRpbWVzPSIwOzEiIGR1cj0iMC42MjVzIiBiZWdpbj0iLTAuNTcyOTE2NjY2NjY2NjY2NnMiIHJlcGVhdENvdW50PSJpbmRlZmluaXRlIj48L2FuaW1hdGU+CiAgPC9yZWN0Pgo8L2c+PGcgdHJhbnNmb3JtPSJyb3RhdGUoMzAgNTAgNTApIj4KICA8cmVjdCB4PSI0NyIgeT0iMiIgcng9IjMiIHJ5PSIzLjYiIHdpZHRoPSI2IiBoZWlnaHQ9IjI0IiBmaWxsPSIjYmRiZGJkIj4KICAgIDxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9Im9wYWNpdHkiIHZhbHVlcz0iMTswIiBrZXlUaW1lcz0iMDsxIiBkdXI9IjAuNjI1cyIgYmVnaW49Ii0wLjUyMDgzMzMzMzMzMzMzMzNzIiByZXBlYXRDb3VudD0iaW5kZWZpbml0ZSI+PC9hbmltYXRlPgogIDwvcmVjdD4KPC9nPjxnIHRyYW5zZm9ybT0icm90YXRlKDYwIDUwIDUwKSI+CiAgPHJlY3QgeD0iNDciIHk9IjIiIHJ4PSIzIiByeT0iMy42IiB3aWR0aD0iNiIgaGVpZ2h0PSIyNCIgZmlsbD0iI2JkYmRiZCI+CiAgICA8YW5pbWF0ZSBhdHRyaWJ1dGVOYW1lPSJvcGFjaXR5IiB2YWx1ZXM9IjE7MCIga2V5VGltZXM9IjA7MSIgZHVyPSIwLjYyNXMiIGJlZ2luPSItMC40Njg3NDk5OTk5OTk5OTk5NHMiIHJlcGVhdENvdW50PSJpbmRlZmluaXRlIj48L2FuaW1hdGU+CiAgPC9yZWN0Pgo8L2c+PGcgdHJhbnNmb3JtPSJyb3RhdGUoOTAgNTAgNTApIj4KICA8cmVjdCB4PSI0NyIgeT0iMiIgcng9IjMiIHJ5PSIzLjYiIHdpZHRoPSI2IiBoZWlnaHQ9IjI0IiBmaWxsPSIjYmRiZGJkIj4KICAgIDxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9Im9wYWNpdHkiIHZhbHVlcz0iMTswIiBrZXlUaW1lcz0iMDsxIiBkdXI9IjAuNjI1cyIgYmVnaW49Ii0wLjQxNjY2NjY2NjY2NjY2NjYzcyIgcmVwZWF0Q291bnQ9ImluZGVmaW5pdGUiPjwvYW5pbWF0ZT4KICA8L3JlY3Q+CjwvZz48ZyB0cmFuc2Zvcm09InJvdGF0ZSgxMjAgNTAgNTApIj4KICA8cmVjdCB4PSI0NyIgeT0iMiIgcng9IjMiIHJ5PSIzLjYiIHdpZHRoPSI2IiBoZWlnaHQ9IjI0IiBmaWxsPSIjYmRiZGJkIj4KICAgIDxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9Im9wYWNpdHkiIHZhbHVlcz0iMTswIiBrZXlUaW1lcz0iMDsxIiBkdXI9IjAuNjI1cyIgYmVnaW49Ii0wLjM2NDU4MzMzMzMzMzMzMzI2cyIgcmVwZWF0Q291bnQ9ImluZGVmaW5pdGUiPjwvYW5pbWF0ZT4KICA8L3JlY3Q+CjwvZz48ZyB0cmFuc2Zvcm09InJvdGF0ZSgxNTAgNTAgNTApIj4KICA8cmVjdCB4PSI0NyIgeT0iMiIgcng9IjMiIHJ5PSIzLjYiIHdpZHRoPSI2IiBoZWlnaHQ9IjI0IiBmaWxsPSIjYmRiZGJkIj4KICAgIDxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9Im9wYWNpdHkiIHZhbHVlcz0iMTswIiBrZXlUaW1lcz0iMDsxIiBkdXI9IjAuNjI1cyIgYmVnaW49Ii0wLjMxMjQ5OTk5OTk5OTk5OTk0cyIgcmVwZWF0Q291bnQ9ImluZGVmaW5pdGUiPjwvYW5pbWF0ZT4KICA8L3JlY3Q+CjwvZz48ZyB0cmFuc2Zvcm09InJvdGF0ZSgxODAgNTAgNTApIj4KICA8cmVjdCB4PSI0NyIgeT0iMiIgcng9IjMiIHJ5PSIzLjYiIHdpZHRoPSI2IiBoZWlnaHQ9IjI0IiBmaWxsPSIjYmRiZGJkIj4KICAgIDxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9Im9wYWNpdHkiIHZhbHVlcz0iMTswIiBrZXlUaW1lcz0iMDsxIiBkdXI9IjAuNjI1cyIgYmVnaW49Ii0wLjI2MDQxNjY2NjY2NjY2NjYzcyIgcmVwZWF0Q291bnQ9ImluZGVmaW5pdGUiPjwvYW5pbWF0ZT4KICA8L3JlY3Q+CjwvZz48ZyB0cmFuc2Zvcm09InJvdGF0ZSgyMTAgNTAgNTApIj4KICA8cmVjdCB4PSI0NyIgeT0iMiIgcng9IjMiIHJ5PSIzLjYiIHdpZHRoPSI2IiBoZWlnaHQ9IjI0IiBmaWxsPSIjYmRiZGJkIj4KICAgIDxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9Im9wYWNpdHkiIHZhbHVlcz0iMTswIiBrZXlUaW1lcz0iMDsxIiBkdXI9IjAuNjI1cyIgYmVnaW49Ii0wLjIwODMzMzMzMzMzMzMzMzMxcyIgcmVwZWF0Q291bnQ9ImluZGVmaW5pdGUiPjwvYW5pbWF0ZT4KICA8L3JlY3Q+CjwvZz48ZyB0cmFuc2Zvcm09InJvdGF0ZSgyNDAgNTAgNTApIj4KICA8cmVjdCB4PSI0NyIgeT0iMiIgcng9IjMiIHJ5PSIzLjYiIHdpZHRoPSI2IiBoZWlnaHQ9IjI0IiBmaWxsPSIjYmRiZGJkIj4KICAgIDxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9Im9wYWNpdHkiIHZhbHVlcz0iMTswIiBrZXlUaW1lcz0iMDsxIiBkdXI9IjAuNjI1cyIgYmVnaW49Ii0wLjE1NjI0OTk5OTk5OTk5OTk3cyIgcmVwZWF0Q291bnQ9ImluZGVmaW5pdGUiPjwvYW5pbWF0ZT4KICA8L3JlY3Q+CjwvZz48ZyB0cmFuc2Zvcm09InJvdGF0ZSgyNzAgNTAgNTApIj4KICA8cmVjdCB4PSI0NyIgeT0iMiIgcng9IjMiIHJ5PSIzLjYiIHdpZHRoPSI2IiBoZWlnaHQ9IjI0IiBmaWxsPSIjYmRiZGJkIj4KICAgIDxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9Im9wYWNpdHkiIHZhbHVlcz0iMTswIiBrZXlUaW1lcz0iMDsxIiBkdXI9IjAuNjI1cyIgYmVnaW49Ii0wLjEwNDE2NjY2NjY2NjY2NjY2cyIgcmVwZWF0Q291bnQ9ImluZGVmaW5pdGUiPjwvYW5pbWF0ZT4KICA8L3JlY3Q+CjwvZz48ZyB0cmFuc2Zvcm09InJvdGF0ZSgzMDAgNTAgNTApIj4KICA8cmVjdCB4PSI0NyIgeT0iMiIgcng9IjMiIHJ5PSIzLjYiIHdpZHRoPSI2IiBoZWlnaHQ9IjI0IiBmaWxsPSIjYmRiZGJkIj4KICAgIDxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9Im9wYWNpdHkiIHZhbHVlcz0iMTswIiBrZXlUaW1lcz0iMDsxIiBkdXI9IjAuNjI1cyIgYmVnaW49Ii0wLjA1MjA4MzMzMzMzMzMzMzMzcyIgcmVwZWF0Q291bnQ9ImluZGVmaW5pdGUiPjwvYW5pbWF0ZT4KICA8L3JlY3Q+CjwvZz48ZyB0cmFuc2Zvcm09InJvdGF0ZSgzMzAgNTAgNTApIj4KICA8cmVjdCB4PSI0NyIgeT0iMiIgcng9IjMiIHJ5PSIzLjYiIHdpZHRoPSI2IiBoZWlnaHQ9IjI0IiBmaWxsPSIjYmRiZGJkIj4KICAgIDxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9Im9wYWNpdHkiIHZhbHVlcz0iMTswIiBrZXlUaW1lcz0iMDsxIiBkdXI9IjAuNjI1cyIgYmVnaW49IjBzIiByZXBlYXRDb3VudD0iaW5kZWZpbml0ZSI+PC9hbmltYXRlPgogIDwvcmVjdD4KPC9nPgo8L3N2Zz4="); exit;
    }
    
    if (isset($_GET["static"]) && $_GET["static"]==="next.svg") {
      header("Content-Type: image/svg+xml"); header("Expires: Tue, 1 Jan 2030 05:00:00 GMT"); header("Cache-Control: max-age=8640000, public"); echo base64_decode("PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZlcnNpb249IjEuMSIgd2lkdGg9IjgiIGhlaWdodD0iMjAiPgoJPHBhdGggZD0iTTAgMCBWMiBMNiAxMCBMMCAxOCBWMjAgTDggMTAgWiIgc3Ryb2tlPSIjZmZmIiBmaWxsPSIjZmZmIi8+Cjwvc3ZnPgo="); exit;
    }
    
    if (isset($_GET["static"]) && $_GET["static"]==="play-pause.svg") {
      header("Content-Type: image/svg+xml"); header("Expires: Tue, 1 Jan 2030 05:00:00 GMT"); header("Cache-Control: max-age=8640000, public"); echo base64_decode("PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZlcnNpb249IjEuMSIgd2lkdGg9IjYwIiBoZWlnaHQ9IjMwIj4KCTxwb2x5Z29uIHBvaW50cz0iNSwyIDUsMjggMjcsMTUiIHN0cm9rZT0iI2ZmZiIgc3Ryb2tlLXdpZHRoPSIyIiBmaWxsPSIjMDAwIiBmaWxsLW9wYWNpdHk9IjAuNSIvPgoJPHJlY3QgeD0iMzUiIHk9IjMiIHdpZHRoPSI4IiBoZWlnaHQ9IjI0IiBzdHJva2U9IiNmZmYiIHN0cm9rZS13aWR0aD0iMiIgZmlsbD0iIzAwMCIgZmlsbC1vcGFjaXR5PSIwLjUiLz4KCTxyZWN0IHg9IjQ3IiB5PSIzIiB3aWR0aD0iOCIgaGVpZ2h0PSIyNCIgc3Ryb2tlPSIjZmZmIiBzdHJva2Utd2lkdGg9IjIiIGZpbGw9IiMwMDAiIGZpbGwtb3BhY2l0eT0iMC41Ii8+Cjwvc3ZnPgo="); exit;
    }
    
    if (isset($_GET["static"]) && $_GET["static"]==="prev.svg") {
      header("Content-Type: image/svg+xml"); header("Expires: Tue, 1 Jan 2030 05:00:00 GMT"); header("Cache-Control: max-age=8640000, public"); echo base64_decode("PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZlcnNpb249IjEuMSIgd2lkdGg9IjgiIGhlaWdodD0iMjAiPgoJPHBhdGggZD0iTTggMCBWMiBMMiAxMCBMOCAxOCBWMjAgTDAgMTAgWiIgc3Ryb2tlPSIjZmZmIiBmaWxsPSIjZmZmIi8+Cjwvc3ZnPgo="); exit;
    }
    
    if (isset($_GET["static"]) && $_GET["static"]==="video-play.svg") {
      header("Content-Type: image/svg+xml"); header("Expires: Tue, 1 Jan 2030 05:00:00 GMT"); header("Cache-Control: max-age=8640000, public"); echo base64_decode("PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZlcnNpb249IjEuMSIgd2lkdGg9IjY0IiBoZWlnaHQ9IjY0Ij4KCTxjaXJjbGUgY3g9IjMyIiBjeT0iMzIiIHI9IjI1IiBzdHJva2U9IiNmZmYiIHN0cm9rZS13aWR0aD0iNyIgZmlsbD0iIzAwMCIgZmlsbC1vcGFjaXR5PSIwLjIiLz4KCTxwb2x5Z29uIHBvaW50cz0iMjYsMjIgMjYsNDIgNDMsMzIiIGZpbGw9IiNmZmYiLz4KPC9zdmc+Cg=="); exit;
    }
    
    if (isset($_GET["static"]) && $_GET["static"]==="style.css") {
      header("Content-Type: text/css"); header("Expires: Tue, 1 Jan 2030 05:00:00 GMT"); header("Cache-Control: max-age=8640000, public"); echo base64_decode("aHRtbCwgYm9keSB7DQogIGZvbnQtZmFtaWx5OiBDYWxpYnJpLCBWZXJkYW5hLCBzYW5zLXNlcmlmOw0KICBmb250LXNpemU6IDExcHQ7DQogIG1hcmdpbjogMDsNCiAgcGFkZGluZzogMDsNCiAgYmFja2dyb3VuZC1jb2xvcjogI2FhYTsNCn0NCi5oZWFkZXJ7DQogIHBhZGRpbmc6IDFleDsNCiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICM2NjY7DQp9DQouaGVhZGVyIGgxew0KICBwYWRkaW5nLWxlZnQ6IDFleDsNCn0NCi5zdWJoZWFkZXIgew0KICBwYWRkaW5nLWxlZnQ6IDFleDsNCn0NCi5mb290ZXIgew0KICBjbGVhcjogYm90aDsNCiAgcGFkZGluZzogMWV4Ow0KICBib3JkZXItdG9wOiAxcHggc29saWQgIzY2NjsNCn0NCi5mb290ZXIgYSwgLmhlYWRlciBhIHsNCiAgY29sb3I6ICM2NjY7DQogIHRleHQtZGVjb3JhdGlvbjogbm9uZTsNCn0NCiNjcmVkaXRzIHsNCiAgY2xlYXI6IGJvdGg7DQogIHRleHQtYWxpZ246IHJpZ2h0Ow0KICBwYWRkaW5nOiAxZXg7DQogIGJvcmRlci10b3A6IDFweCBzb2xpZCAjNjY2Ow0KICBjb2xvcjogIzY2NjsNCn0NCiNjcmVkaXRzIGEgew0KICBjb2xvcjogIzY2NjsNCiAgdGV4dC1kZWNvcmF0aW9uOiBub25lOw0KfQ0KLmZvdG8gaW1nIHsNCiAgZmxvYXQ6IGxlZnQ7DQp9DQouaW5mYnV0dG9uIHsNCiAgd2lkdGg6IDE2cHg7DQogIHZlcnRpY2FsLWFsaWduOiBib3R0b207DQogIGRpc3BsYXk6IGlubGluZTsNCiAgbWFyZ2luOiAycHg7IA0KfQ0KLmluZmJ1dHRvbiBhIHsNCiAgdGV4dC1kZWNvcmF0aW9uOiBub25lOw0KICBib3JkZXI6IDA7DQogIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7DQp9DQouaW5mYnV0dG9uIGltZyB7DQogIHZlcnRpY2FsLWFsaWduOiB0b3A7DQp9DQouY2xhbGx7DQogIGNsZWFyOiBib3RoOw0KfQ0KLm92ZXJsYXlfaWNvbnMgew0KICBwb3NpdGlvbjogYWJzb2x1dGU7DQp9DQoub3ZlcmljbyB7DQogIHRvcDogMHB4Ow0KICBsZWZ0OiAwcHg7DQogIGZsb2F0OiBsZWZ0Ow0KICBjbGVhcjogYm90aDsNCn0NCi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi8NCnVsLnRhYnMgew0KICBtYXJnaW46IDA7DQogIHBhZGRpbmc6IDA7DQogIGZsb2F0OiBsZWZ0Ow0KICBsaXN0LXN0eWxlOiBub25lOw0KICBoZWlnaHQ6IDI2cHg7DQogIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjOTk5Ow0KICB3aWR0aDogMTAwJTsNCn0NCnVsLnRhYnMgbGkgew0KICBmbG9hdDogbGVmdDsNCiAgbWFyZ2luOiAwOw0KICBwYWRkaW5nOiAwOw0KICBoZWlnaHQ6IDI1cHg7IA0KICBsaW5lLWhlaWdodDogMjVweDsNCiAgYm9yZGVyOiAxcHggc29saWQgIzk5OTsNCiAgYm9yZGVyLWxlZnQ6IG5vbmU7DQogIG1hcmdpbi1ib3R0b206IC0xcHg7DQogIG92ZXJmbG93OiBoaWRkZW47DQogIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgYmFja2dyb3VuZDogI2UwZTBlMDsNCn0NCnVsLnRhYnMgbGkgYSB7DQogIHRleHQtZGVjb3JhdGlvbjogbm9uZTsNCiAgY29sb3I6ICMwMDA7DQogIGRpc3BsYXk6IGJsb2NrOw0KICBwYWRkaW5nOiAwIDFleDsNCiAgb3V0bGluZTogbm9uZTsNCn0NCnVsLnRhYnMgbGkgYTpob3ZlciB7DQogIGJhY2tncm91bmQ6ICNjY2M7DQp9DQpodG1sIHVsLnRhYnMgbGkuYWN0aXZlLCBodG1sIHVsLnRhYnMgbGkuYWN0aXZlIGE6aG92ZXIgIHsNCiAgYmFja2dyb3VuZDogI2ZmZjsNCiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNmZmY7DQp9DQoudGFiX2NvbnRlbnQgew0KDQp9DQoudGFiX2lubmVyX2NvbnRlbnQgew0KICBjbGVhcjogYm90aDsNCiAgcGFkZGluZzogMWV4Ow0KICBjb2xvcjogIzAwMDsNCiAgbGluZS1oZWlnaHQ6IDE0MCU7DQp9DQoudGFiX2lubmVyX2NvbnRlbnQgYSB7DQogIGNvbG9yOiAjMDA5Ow0KfQ0KLmNyZWRpdHNfY29udGVudCB7DQogIHBhZGRpbmc6IDFlbTsgICAgICAgICANCn0NCi5jcmVkaXRzX2NvbnRlbnQgbGl7DQogIG1hcmdpbi1sZWZ0OiAxZW07ICAgICANCn0NCm9sIGxpew0KICBsaXN0LXN0eWxlOiBpbnNpZGU7DQogIGxpc3Qtc3R5bGUtdHlwZTogZGVjaW1hbDsNCn0NCi5ncHMtY29udGFpbmVyIHsNCiAgaGVpZ2h0OiA1MDBweDsgDQogIG92ZXJmbG93OiBhdXRvOw0KfQ0KLm1zZ2JveCB7DQogIGJvcmRlcjogMnB4IHNvbGlkIGJsYWNrOw0KICBiYWNrZ3JvdW5kOiAjYWFhOw0KICBib3JkZXItcmFkaXVzOiAxMHB4OyAgICAgIA0KICBwYWRkaW5nOiAxZXg7DQogIG1hcmdpbjogMmV4IGF1dG87DQogIG1pbi13aWR0aDogMjAwcHg7DQogIHdpZHRoOiA1MCU7IA0KfQ0KLmNlbnRlciB7DQogIHRleHQtYWxpZ246IGNlbnRlcjsgICAgICAgICANCn0NCi5tc2dib3ggaW5wdXQgew0KICBwYWRkaW5nOiAwLjVleDsgICAgIA0KICB3aWR0aDogMTUwcHg7ICAgDQp9DQpsYWJlbCB7ICANCn0NCiN0YWItZXhpZiAudGFiX2lubmVyX2NvbnRlbnQgZGl2IHsNCiAgYm9yZGVyLWJvdHRvbTogMXB4IGRhc2hlZCAjMDAwOw0KfQ0KI3RhYi1leGlmIC50YWJfaW5uZXJfY29udGVudCBzdHJvbmd7DQogIGZsb2F0OiByaWdodDsNCn0NCi5hbGItZGVzYyB7DQogIG1hcmdpbi10b3A6IDFleDsNCn0NCi5kZXNjLCAuZm90byB7DQogIGZsb2F0OiBsZWZ0Ow0KfQ0KLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqLw0KLmltYWdlLWdhbGxlcnkgew0KICBkaXNwbGF5OiBmbGV4Ow0KICBmbGV4LXdyYXA6IHdyYXA7DQogIGdhcDogMTBweDsNCiAgbWFyZ2luLWJvdHRvbTogMmV4Ow0KfQ0KdWwuaW1hZ2UtZ2FsbGVyeSB7DQogIHBhZGRpbmc6IDFleDsNCn0NCi5pbWFnZS1nYWxsZXJ5ID4gbGkgew0KICBmbGV4OiAxIDEgYXV0bzsgLyogb3IgZmxleDogYXV0bzsgKi8NCiAgaGVpZ2h0OiAzMDBweDsNCiAgY3Vyc29yOiBwb2ludGVyOw0KICBwb3NpdGlvbjogcmVsYXRpdmU7DQogIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTsNCn0NCi5pbWFnZS1nYWxsZXJ5OjphZnRlciB7DQogIGNvbnRlbnQ6ICIiOw0KICBmbGV4LWdyb3c6IDk5OTsNCn0NCi5pbWFnZS1nYWxsZXJ5IGxpIGltZy5pdCB7DQogIG9iamVjdC1maXQ6IGNvdmVyOw0KICB3aWR0aDogMTAwJTsNCiAgaGVpZ2h0OiAxMDAlOw0KICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOw0KICBib3JkZXItcmFkaXVzOiA1cHg7DQp9DQoub3ZlcmxheSB7DQogIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgd2lkdGg6IDEwMCU7DQogIGhlaWdodDogMTAwJTsNCiAgYmFja2dyb3VuZDogcmdiYSg2MCwgNjAsIDYwLCAwLjUpOw0KICB0b3A6IDA7DQogIGxlZnQ6IDA7DQogIHRyYW5zZm9ybTogc2NhbGUoMCk7DQogIHRyYW5zaXRpb246IGFsbCAwLjJzIDAuMXMgZWFzZS1pbi1vdXQ7DQogIGNvbG9yOiAjZmZmOw0KICBib3JkZXItcmFkaXVzOiA1cHg7DQogIC8qIGNlbnRlciBvdmVybGF5IGNvbnRlbnQgKi8NCiAgLyoNCiAgZGlzcGxheTogZmxleDsNCiAgYWxpZ24taXRlbXM6IGNlbnRlcjsNCiAgYWxpZ24taXRlbXM6IGJvdHRvbTsNCiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICovDQp9DQoub3ZlcmxheV9pbiB7DQogIG1hcmdpbjogMWV4Ow0KICBwb3NpdGlvbjphYnNvbHV0ZTsNCiAgYm90dG9tOjA7DQp9DQouaW1hZ2UtZ2FsbGVyeSBsaTpob3ZlciAub3ZlcmxheSB7DQogIHRyYW5zZm9ybTogc2NhbGUoMSk7DQp9DQo="); exit;
    }
    
    if (isset($_GET["static"]) && $_GET["static"]==="blueimp-gallery.min.css") {
      header("Content-Type: text/css"); header("Expires: Tue, 1 Jan 2030 05:00:00 GMT"); header("Cache-Control: max-age=8640000, public"); echo base64_decode(""); exit;
    }
    
    if (isset($_GET["static"]) && $_GET["static"]==="sigal.min.js") {
      header("Content-Type: text/javascript"); header("Expires: Tue, 1 Jan 2030 05:00:00 GMT"); header("Cache-Control: max-age=8640000, public"); echo gzinflate(base64_decode("fVRdT9swFH3nV6TZVNlqFrWvCxYCNmlIG/DAW1VV/rhJLBw7chxKVfrfd93S0gHZo32Ozz333pOUvZVBO5sotzKOqw4MyACK0I0uyUpbvM8Pl/daht5DNx5Pzweg3ICtQk03T9wnnA2xpLOSBzJf0ILn3Ii+YcrJvgEbcuMQQktF67qwDG7Ze0PSC2UOKmnGszSCKd1uz8pDB6d0nolM0o1k8uVlTy2iIXirIj3wAD8NxBNJS+eblBaAVsNlCF6LPgBJGwi1w4LyI8R3VdELLfAxifIq0TYRVOQ17+5W9t67FnxYE0XHY8IHa2vb9thLxt9VCOsW0iyttVJgP8EtbyKumyqdqI/wEzc94mKuFjSDnLctWHVda6MIp7Q4uhFOrf9BYddsLxodCD0ZMFfqwf1wKxuDghqbJ6dVMmVsMCZDAWJx8XFiYjAheA3PdyWWKabnTFwM8brWaAlEZDP6fYjT9l0dhY4tVxBep3+1vlG45t4E3RpQr80ZbR+lxZ2gDQv+18Of3+z/gd8epxRcVRm4NOa6Bvko3DN05PA5fGKgu1o/8OoWV/kWBLFLlGDTQpzz1wKFmEwon4tFLqMuKDY6PWXvlhOhXQBOF9h6iOjSwnM4evpK0i8SYBljROfTRSbYt1kmme2NKRDMSxdcl/Bc4ziAy5oc9Ahkaq9SooqiueKBkxTFsGskV9wY8OsCfyRlXt3iN86YoB5wbjaRTOW1hzIbzSJhf0ACptjLA0mw/cPJLBtNt7SInkaMSUwWsbBKbhpeAY0vmKTb4uwv")); exit;
    }
    
    if (isset($_GET["static"]) && $_GET["static"]==="lazy.min.js") {
      header("Content-Type: text/javascript"); header("Expires: Tue, 1 Jan 2030 05:00:00 GMT"); header("Cache-Control: max-age=8640000, public"); echo gzinflate(base64_decode("hVPBbtswDL3nK2YfDAn1jOwaRxi6YsAG7LQN26HoQZZoR6gsbTKdIov975OUxo0Roz0YEqnHR/KZJHVvBCpriKDHPXfvIK/zhq1zyaYXehxLUWj+78COyijcTC+cHjnjw+ABwHghQfPDMKxL6Q3Bta64eBwGWUor+hYMFlzKz3t/+aY6BAPuIxFXPpJ2wlmt0zykLMA0ykCefKD5ElZbLq+QdBN4EbnYRThJrVkgjYxz1BUdpWN+um0uBKlZB/hTtWB7JBf+GBg4vra8ARJi/Tc5ZhTWkSA4Z5M6f3twhx+gQaB1t1qTVLXNveTI3wfih5TmFVuX1ZYX2teEu7K6uaExp+p+qU5VGgi/rx5olhHTa50wFsyiAbxFdKrqEUg6EaYet3odsMzQORFiY67CG29kyRtfZi5PpdHyXH2WNQk7G8MQ+3C+e95B/B9d0G9qbDZ1QbjKx/qUn2xvpDLNnVY+5rvXjtDSAfbOJAnhha1r/69+KxlynM0voJodBtszvET6jM/lhO7WW1YVaP9kWTy2T8pI+1Qo4wfvTBAxlUW0bYCdbgvIiU9DjQEZzhnuucIIciEkoOLlGuZ1mQl1OVfTNDlo7R7m6yaWvC8Lt7oc/I3wC/3mCpXC1+GmVaDjOFKCO9XRcvUf")); exit;
    }
    
    if (isset($_GET["static"]) && $_GET["static"]==="blueimp-gallery.min.js") {
      header("Content-Type: text/javascript"); header("Expires: Tue, 1 Jan 2030 05:00:00 GMT"); header("Cache-Control: max-age=8640000, public"); echo gzinflate(base64_decode("")); exit;
    }
    
    if (isset($_GET["static"]) && $_GET["static"]==="jquery-3.7.0.min.js") {
      header("Content-Type: text/javascript"); header("Expires: Tue, 1 Jan 2030 05:00:00 GMT"); header("Cache-Control: max-age=8640000, public"); echo gzinflate(base64_decode("")); exit;
    }
    /*START-DO-NOT-REMOVE-THIS*/

  
  @set_time_limit(120);
  
  error_reporting(E_ERROR | E_WARNING | E_PARSE);
  
  


 
class Sigal {
  public $version = '1.7.0';

  
  public $dir = 'pictures';
  
  public $cache = 'cache';
  
  public $defaultIcon = '?static=defico.png';
  
  public $defaultDirIcon = '?static=defdirico.png';
  
  public $icotitlefname = '000.nfo';
  
  public $lockfname = '000.lock';
  
  public $thumb_x = 160;
  
  public $thumb_y = 120;
  
  public $middle_x = 800;
  
  public $imgTitleLen = 24;
  
  public $date_format = 'Y-m-d';
  
  public $galTitle = 'SiGal gallery';
  
  public $legal_notice = 'No photos can be distributted without written permission of their author.';
  
  public $enable_mass_download = true;
  
  public $show_exif_tab = true;
  
  public $show_gps_tab = true;
  
  public $cache_image_quality = 80;
  
  
  public $exts = array('jpg','jpeg','png','gif','bmp','tif','tiff','svg','swf','flv','mp4', 'mp3','mts','mov');
  
  public $extsIcon = array('jpg','jpeg','png', 'gif', 'bmp');
  
  public $extsExif = array('jpg','jpeg','tif','tiff');
  
  public $extsVideo = array('swf','flv','mp4','mts','mov');
  
  public $extsAudio = array('mp3');
  
  public $defaultMime = 'text/plain';
  
  public $avMime = array(
    'mp3' => 'audio/mpeg',
    'mp4' => 'video/mp4',
    'mts' => 'video/mts',
    'mov' => 'video/quicktime',
    'swf' => 'application/x-shockwave-flash',
    'flv' => 'video/x-flv'
  );
  
  public $func_sortimages = NULL;
  
  public $func_sortalbums = NULL;
  
  public $func_scandir = NULL;
  
  public $func_albumname = NULL;
  
  public $func_groupname = NULL;
  
  public $func_sortgroups = NULL;

  
  public $langs = array(
    'en' => 'English', 
    'cs' => 'Čeština', 
  );
  
  public $LANG = 'en';
  
  
  private $islocked = false;
  
  private $validusers = array();
  


  public $html_head = '<!DOCTYPE html><head><title>{title}</title>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta name="author" content="Gimli2; http://gimli2.gipix.net" />
<meta name="robots" content="noindex">
<meta http-equiv="X-UA-Compatible" content="ie=edge" />
<link rel="shotcut icon" href="?static=favicon.png" />
<link rel="stylesheet" href="?static=blueimp-gallery.min.css" type="text/css" media="screen" />
<link rel="stylesheet" href="?static=style.css" type="text/css" />
<!--OWNCSS-->
<!--GAJS-->
<script type="text/javascript" src="?static=sigal.min.js"></script>
<script type="text/javascript" src="?static=jquery-3.7.0.min.js"></script>

<script type="text/javascript">
  $(document).ready(
    function(){
      //show first when page loads...
      $(".tab_content").hide();
      $("ul.tabs li:first").addClass("active").show();
      $(".tab_content:first").show();

      var activeTab = window.location.hash;
      if (activeTab=="") {
        if(typeof(sessionStorage) !== "undefined") {
            activeTab = sessionStorage.getItem("lasttab");
            if (activeTab == null) activeTab = "";
        }
      }
      if (activeTab!="") {
          $("ul.tabs li").removeClass("active");
          $(".tab_content").hide();
          $("ul.tabs li").each(function(index) {
              x = $(this).find("a").attr("href");
              if (x == activeTab) {
                  $(this).addClass("active");
              }
          });
          $(activeTab).show();
      }

      $("ul.tabs li").click(function() {
        $("ul.tabs li").removeClass("active");
        $(this).addClass("active");
        $(".tab_content").hide();
        var activeTab = $(this).find("a").attr("href");
        $(activeTab).show();
        window.location.hash = activeTab;
        if(typeof(sessionStorage) !== "undefined") sessionStorage.setItem("lasttab", activeTab);
        return false;
      });
          
      $("#image-gallery").click(function (event) {
        event = event || window.event
        var target = event.target || event.srcElement
        var link = target.src ? target.parentNode : target
        var options = { index: link, event: event }
        var links = Array.from(this.getElementsByTagName("a")).filter(function (x) {
          return null !== x.attributes.getNamedItem("data-gallery");
        });
        if (links.length > 0) blueimp.Gallery(links, options);
        console.log(links);
      });
      
      $(".overlay").click(function(event) {
        event = event || window.event
        var target = event.target || event.srcElement
        var isdir = $(target.parentElement).find(".dir").length > 0;       
        if (isdir) window.location = $(target.parentElement).children("a")[0];
      });
    }
  );
</script>
</head><body>

<div id="blueimp-gallery" class="blueimp-gallery" aria-label="image gallery" aria-modal="true" role="dialog" data-start-slideshow="true">
  <div class="slides" aria-live="off"></div>
  <h3 class="title"></h3>
  <a class="prev" aria-controls="blueimp-gallery" aria-label="previous slide" aria-keyshortcuts="ArrowLeft" ></a>
  <a class="next" aria-controls="blueimp-gallery" aria-label="next slide" aria-keyshortcuts="ArrowRight" ></a>
  <a class="close" aria-controls="blueimp-gallery" aria-label="close" aria-keyshortcuts="Escape" ></a>
  <a class="play-pause" aria-controls="blueimp-gallery" aria-label="play slideshow" aria-keyshortcuts="Space" aria-pressed="true" role="button" ></a>
  <ol class="indicator"></ol>
</div>
';

  
  
  public $html_tail = '';
  
  
  
  
  
  function __construct() {
    $this->detect_lang();

    
    $ownstyle_replacement = '';
    if (file_exists('./ownstyle.css')) {
      $ownstyle_replacement =  '<link rel="stylesheet" href="./ownstyle.css" type="text/css" />'."\n";
      $this->html_head = str_replace('<!--OWNCSS-->', $ownstyle_replacement, $this->html_head);
    }
    
    if (file_exists('./ga.js')) {
      $gajs_replacement =  '<script async type="text/javascript" src="./ga.js"></script>'."\n";
      $this->html_head = str_replace('<!--GAJS-->', $gajs_replacement, $this->html_head);
    }

    $this->html_tail = '<div id="credits"><!--LEGALNOTICE--><br />
    '.$this->lang('Powered by').' <a href="http://gimli2.gipix.net/sigal/">SiGal</a> |
    <a href="?credits">'.$this->lang('Settings &amp; info').'</a>
    </div>
    <script src="?static=blueimp-gallery.min.js"></script>
    </body></html>';

    
    $this->html_tail = str_replace('<!--LEGALNOTICE-->', $this->legal_notice.'<br/> lang='.$this->LANG, $this->html_tail);
  }
  
  
  public function addAccess() {
    $user = trim($_POST['fuser']);
    $pass = trim($_POST['fpass']);
    $_SESSION['givenaccess'][] = trim($user.':'.$pass);
    $_SESSION['givenaccess'] = array_unique($_SESSION['givenaccess']);
  }

  
  
  public function basepathname($path) {
    $len = strlen($this->dir) + 1;
    if(0 == strncmp($path, $this->dir . '/', $len)) {
      $path = substr($path, $len);
    }
    return $path;
  }
  
  
  public function getparentdir($path) {
    return substr($path, 0, -1 * (1 + strlen(basename($path))));
  }

  
  
  function urlpathencode($path) {
    return implode("/", array_map(function($s) { return urlencode($s); }, explode("/", $path)));
  }

  
  
  public function showGallery($albtop = NULL) {
    ob_start();
    ob_implicit_flush(true);
    echo str_replace('{title}', $this->galTitle, $this->html_head);
    echo '<div class="header">';
    $aname='';
    if($albtop!==NULL) {
      $aname = $this->basepathname($albtop);
      echo '<h1>'.$this->galTitle.': '.$aname.'</h1>';
    } else {
      echo '<h1>'.$this->galTitle.'</h1>';
    }
    echo '</div>';
    $albs = $this->getAlbums($albtop);
    

    if ($albtop!==NULL) {
        echo '<div class="header">'.$this->lang('Navigation').': ';
        echo '<a href="?alb='.urlencode($this->getparentdir($aname)).'">'.$this->lang('Back to parent album').'</a>';
        echo ' | <a href="?">'.$this->lang('Back to top level').'</a>';
        echo '</div>';
    }

    
    $albs_by_group = array();
    
    foreach($albs as $a) {
      $bn = $this->basepathname($a);
      
      
      if (isset($this->func_groupname) && $this->func_groupname !== NULL && is_callable($this->func_groupname)) {
        $group = call_user_func($this->func_groupname, $bn);
      } else {
        
        $cutpos = strpos($bn, '-');
        if ($cutpos === FALSE) $cutpos = strpos($bn, '_');
        if ($cutpos === FALSE) $cutpos = strlen($bn);
        $group = substr($bn, 0,$cutpos);
      }
      $albs_by_group[$group][] = $a;
    }

    $tabs = 100; 
    $groups = array_keys($albs_by_group);
    if (isset($this->func_sortgroups) && $this->func_sortgroups !== NULL && is_callable($this->func_sortgroups)) {
      $groups = call_user_func($this->func_sortgroups, $groups);
    }
    
    
    if(count($groups) > 1 || ( count($groups) == 1 && strlen($groups[0]) > 0) ) {
      echo '<ul class="tabs">';
      foreach ($groups as $g) {
        echo '<li><a href="#tab-'.$tabs.'">'.$g.'</a></li>';
        $tabs++;
      }
      echo '</ul>';
    }
    
    $tabs = 100;
    
    foreach ($groups as $group) {
      $albs = $albs_by_group[$group];
      echo '<div id="tab-'.$tabs.'" class="tab_content" style="display:none">';
      echo '<br class="clall" />';
      echo '<div class="tab_inner_content">';
      echo '<h2 class="subheader">'.$group.'</h2>';

      echo '<ul class="image-gallery">';
      
      foreach ($albs as $key=>$a) {
        $titlefoto = $this->getAlbumTitleFile($a);
        $thumb = $this->getThumbName($titlefoto);
        $bn = $this->basepathname($a);
        $content = glob($a.'/*');
        $subdirs = glob($a.'/*', GLOB_ONLYDIR);
        $cnt = count($content);
        $date = filemtime($a);

        echo '<li>';
        
        echo '<div class="overlay_icons">';
        if (count($subdirs) > 0) {
          echo '<img src="?static=defdirico.png" height="32" alt="'.$this->lang('Contain subdirs').'" title="'.$this->lang('Contain subdirs').'" class="overico" />';
        }
        
        if (array_search($a.'/'.$this->lockfname, $content)!==FALSE) {
          echo '<img src="?static=lock.png" height="32" alt="'.$this->lang('locked').'" title="'.$this->lang('access restricted').'" class="overico" />';
        }
        echo '</div>';
        echo '<a href="?alb='.$this->urlpathencode($bn).'" title="'.$bn.'" class="clall">';
        if ($thumb === $this->defaultIcon || $thumb === $this->defaultDirIcon || file_exists($thumb)) {
          echo '<img src="'.$thumb.'" height="'.$this->thumb_y.'" alt="'.$bn.'" class="it" />';
        } else {
          echo '<img src="?static=1px.gif" data-lazy="?mkthumb='.urlencode($this->basepathname($titlefoto)).'" height="'.$this->thumb_y.'" alt="'.$bn.'" class="it" />';
        }
        echo '</a>';
        echo '<div class="alb-desc">';
        echo $this->getAlbumTitle($a);
        echo '<div class="desc">'.date($this->date_format, $date).' ('.$this->lang('%d files',$cnt).')</div>';
        echo '</div>';
        echo '</li>'."\n";
        ob_flush();
      }
      echo '</ul>';
      
      echo '<br class="clall" />';
      echo '</div>'."\n";
      echo '</div>'."\n";
      $tabs++;
    }

    if ($albtop!==NULL) {
        echo '<div class="footer">'.$this->lang('Navigation').': ';
        echo '<a href="?alb='.urlencode($this->getparentdir($aname)).'" onclick="history.back();">'.$this->lang('Back to parent album').'</a>';
        echo ' | <a href="?">'.$this->lang('Back to top level').'</a>';
        echo '</div>';
    }
    echo '<script src="?static=lazy.min.js"></script><script>lazy.init({delay:200});</script>';
    
    echo $this->html_tail;
  }
  
  
  public function showAlbum($alb) {
    $alb = $this->dir . '/' . $this->sanitizePath(urldecode($alb));
    $fotos = $this->getImages($alb);

    
    if(count($fotos) == 0) {
      $this->showGallery($alb);
      return;
    }

    ob_start();
    ob_implicit_flush(true);
    $aname = $this->basepathname($alb);
    echo str_replace('{title}', $aname, $this->html_head);
    echo '<div class="header">';
    echo '<h1>'.$this->galTitle.': '.$aname.'</h1>';
    echo '</div>';
    echo '<div class="header">'.$this->lang('Navigation').': ';
    echo '<a href="?alb='.urlencode($this->getparentdir($aname)).'">'.$this->lang('Back to album selection').'</a>';
    if ($this->enable_mass_download) {
      echo ' | '.$this->lang('Functions').': ';
      echo '<a href="?#" onClick="javascript:dowloadselected(); return false;">'.$this->lang('Download selected images').' (<span id="multipledownloadlinkcnt">0</span>)</a>';
      echo ', <a href="?#" onClick="javascript:toggleAllCheckboxes(); return false;">'.$this->lang('toggle all').'</a>';
    }
    echo '</div>';

    

    
    $this->readLock($alb);
    if ($this->islocked && !$this->isAccessible()) {
      $this->showPassForm();
      echo $this->html_tail;
      die();
    }
    echo '<ul id="image-gallery" class="image-gallery">';
    foreach($fotos as $f) {
      $bn = $this->basepathname($f);
      $middle = $this->getMiddleName($f);
      echo '<li>';
      $ext = strtolower($this->getExt($f));
      if($ext !== "mp4" && isset($this->func_avfileplay) && in_array($ext, $this->extsVideo)) {
        
        echo '<a href="?avfile='.$this->basepathname($f).'" title="'.$bn.'" data-gallery>';
      } else if ($middle===$this->defaultIcon || file_exists($middle)) {
        
        if ($middle===$this->defaultIcon) {
          if (is_dir($f)) {
            echo '<div class="overlay_icons">';
            
            
            echo '<img src="?static=defdirico.png" height="32" alt="'.$this->lang('Contain subdirs').'" title="'.$this->lang('Contain subdirs').'" class="overico dir" />';
            
            if (file_exists($f.'/'.$this->lockfname)) {
              echo '<img src="?static=lock.png" height="32" alt="'.$this->lang('locked').'" title="'.$this->lang('access restricted').'" class="lock" />';
            }
            echo '</div>';
            echo '<a href="?alb='.urlencode($bn).'" title="'.$bn.'">';
          } else {
            
            echo '<a href="'.$f.'" title="'.$bn.'" class="i">';
          }
        } else {
          echo '<a href="'.$middle.'" title="'.$bn.'" class="i" data-gallery>';
        }
      } else {
        echo '<a href="?mkmid='.urlencode($bn).'" title="'.$bn.'" class="i" data-gallery>';
      }
      if (is_dir($f)) {
        $thumb = $this->getThumbName($this->getAlbumTitleFile($f));
      } else {
        $thumb = $this->getThumbName($f);
      }
      if ($thumb === $this->defaultIcon || $thumb === $this->defaultDirIcon || file_exists($thumb)) {
        echo '<img src="'.$thumb.'" height="'.$this->thumb_y.'" alt="'.$bn.'" class="it" />';
      } else {
        echo '<img src="?static=1px.gif" data-lazy="?mkthumb='.urlencode($bn).'" height="'.$this->thumb_y.'" alt="'.$bn.'" class="it" />';
      }
      echo '</a>';
      echo '<div class="overlay">';
      echo '<div class="overlay_in">';
      echo $this->getImageTitle($f);
      echo date($this->date_format, filemtime($f)).' | ';
      if ($this->enable_mass_download) {
        echo '<div class="infbutton"><input type="checkbox" name="i[]" value="'.$f.'" onClick="addToDownload(\''.$f.'\')" title="'.$this->lang('+/- to multiple download').'" /></div>';
      }
      echo '<div class="infbutton"><a href="?foto='.urlencode($bn).'#tab-base"><img src="?static=info.png" alt="'.$this->lang('Detailed info').'" title="'.$this->lang('Detailed info (EXIF, GPS)').'" /></a></div>';
      echo '<div class="infbutton"><a href="'.$f.'#t"><img src="?static=download.png" alt="'.$this->lang('Download').'" title="'.$this->lang('Download full size').'" /></a></div>';
      
      echo '</div>';
      echo '</div>';
      echo '</li>'."\n";
      ob_flush();
    }
    echo '</ul>';
    echo '<script src="?static=lazy.min.js"></script><script>lazy.init({delay:200});</script>';
    echo '<div class="footer">'.$this->lang('Navigation').': <a href="?alb='.urlencode($this->getparentdir($aname)).'">'.$this->lang('Back to album selection').'</a></div>';
    echo $this->html_tail;
  }
  
  
  public function showImage($f) {
    $f = $this->dir . '/' . $this->sanitizePath(urldecode($f));
    $bn = $this->basepathname($f);

    
    $lf = substr($f, 0, -1*strlen($bn)).$this->lockfname;
    if (file_exists($lf)) {
      $this->islocked = true;
      $this->validusers = file($lf);
      foreach ($this->validusers as $key=>$value) {
        $this->validusers[$key] = trim($value);
      }
    } else {
      $this->islocked = false;
    }

    
    $ext = strtolower($this->getExt($f));
    echo str_replace('{title}', $bn, $this->html_head);
    
    
    if ($this->islocked && !$this->isAccessible()) {
      $this->showPassForm();
      echo '<div class="footer">'.$this->lang('Navigation').': <a href="?">'.$this->lang('Back to album selection').'</a></div>';
      echo $this->html_tail;
      die();
    }
    
    echo '<div class="foto">';
    if (in_array($ext, $this->extsVideo)) {
      echo '<video height="480" width="854" src="'.$f.'" controls="controls">';
      echo '<source src="'.$f.'" type="'.$this->avMime[$ext].'" />';
      echo $this->lang('Your browser does not support the video tag.');
      echo '</video>';
    } elseif (in_array($ext, $this->extsAudio)) {
      echo '<audio src="'.$f.'" controls="controls">';
      echo '<source src="'.$f.'" type="'.$this->avMime[$ext].'" />';
      echo $this->lang('Your browser does not support the audio tag.');
      echo '</audio>';
    } else {
      $middle = $this->getMiddleName($f);
      if (file_exists($middle)) {
        echo '<img src="'.$middle.'" alt="'.$bn.'" />';
      } else {
        echo '<img src="?mkmid='.urlencode($bn).'" alt="'.$bn.'" />';
      }
    }
    echo '<div class="desc">';
    echo '<div>'.$this->lang('Navigation').': <a href="?alb='.$this->urlpathencode($this->basepathname(substr($f,0,-1*strlen(basename($f))-1))).'">'.$this->lang('Back to album thumbnails').'</a></div><br />';
    
    echo '<ul class="tabs">';
    echo '  <li><a href="#tab-base">'.$this->lang('Base info').'</a></li>';
    if ($this->show_exif_tab) echo '  <li><a href="#tab-exif">'.$this->lang('EXIF details').'</a></li>';
    if ($this->show_gps_tab)  echo '  <li><a href="#tab-gps">'.$this->lang('GPS').'</a></li>';
    echo '</ul>';
    
    echo '<div id="tab-base" class="tab_content">';
    echo '<div class="tab_inner_content">';
    echo '<p>'.$this->lang('File name').':</p>';
    echo '<h1>'.basename($bn).'</h1>';
    echo '<p>'.$this->lang('Links').':</p>';
    echo '<a href="'.$f.'">'.$this->lang('download full size').'</a> ('.round(filesize($f)/(1024*1024),2).' MB)';
    echo '</div>';
    echo '</div>';

    
    if (in_array($ext, $this->extsExif)) {
      $exif=exif_read_data($f);
      if ($this->show_exif_tab) {
        echo '<div id="tab-exif" class="tab_content">';
        echo '<div class="tab_inner_content">';
        echo '<div><label>'.$this->lang('date').': </label><strong>'.$exif['DateTimeOriginal'].'</strong></div>';
        echo '<div><label>'.$this->lang('orig. filesize').': </label><strong>'.round($exif['FileSize']/(1024*1024),2).' MB</strong></div>';
        echo '<div><label>'.$this->lang('orig. size').': </label><strong>'.$exif['COMPUTED']['Width'].'×'.$exif['COMPUTED']['Height'].' px</strong></div>';
        echo '<div><label>'.$this->lang('exposition').': </label><strong>'.$exif['ExposureTime'].' s</strong></div>';
        echo '<div><label>'.$this->lang('ISO').': </label><strong>'.$exif['ISOSpeedRatings'].'</strong></div>';
        echo '<div><label>'.$this->lang('Anum').': </label><strong>'.$exif['COMPUTED']['ApertureFNumber'].'</strong></div>';
        echo '<div><label>'.$this->lang('FocalLength').': </label><strong>'.$exif['FocalLength'].' mm</strong></div>';
        echo '<div><label>'.$this->lang('Orientation').': </label><strong>'.$exif['Orientation'].'</strong></div>';
        echo '<div><label>'.$this->lang('Camera model').': </label><strong>'.$exif['Model'].'</strong></div>';
        echo '</div>';
        echo '</div>';
      }

      if ($this->show_gps_tab) {
        
        echo '<div id="tab-gps" class="tab_content">';
        echo '<div class="tab_inner_content">';
        if ($this->hasGPSData($exif)) {
          $gps = $this->getGPSLatLon($exif);
          $hgps = $this->getHumanGPS($gps[0], $gps[1]);
          echo '<p>'.$this->lang('Position').':</p>';
          echo '<h2>'.$hgps['lat'].', '.$hgps['lon'].'</h2>';
          echo '<p>'.$this->lang('Links').':</p>';
          echo '<a href="http://mapy.cz/#t=s&q='.urlencode($gps[0].', '.$gps[1]).'">mapy.cz</a><br />';
          echo '<a href="http://maps.google.cz/maps?q='.urlencode($gps[0].', '.$gps[1]).'">maps.google.com</a><br />';
          echo '<p>'.$this->lang('Maps').':</p>';
          echo '<div class="gps-container">';
          echo '<div>';
          echo '<img src="http://pafciu17.dev.openstreetmap.org/?module=map&center='.$gps[1].','.$gps[0].',&zoom=13&type=mapnik&width=240&height=240&points='.$gps[1].','.$gps[0].',pointImagePattern:red" /><br class="clall">';
          echo '</div>';
          echo '<div>';
          echo '<img src="http://ojw.dev.openstreetmap.org/StaticMap/?lat='.$gps[0].'&lon='.$gps[1].'&z=10&w=240&h=240&layer=hiking&mode=Add+icon&mlat0='.$gps[0].'&mlon0='.$gps[1].'&show=1" /><br class="clall">';
          echo '</div>';
          echo '<div>';
          echo '<img src="http://ojw.dev.openstreetmap.org/StaticMap/?lat='.$gps[0].'&lon='.$gps[1].'&z=13&w=240&h=240&layer=hiking&mode=Add+icon&mlat0='.$gps[0].'&mlon0='.$gps[1].'&show=1" /><br class="clall">';
          echo '</div>';
          echo '</div>';
        }  else {
          echo $this->lang('No GPS data.');
        }
        echo '</div>';
        echo '</div>';
      }
    } else {
      
      if ($this->show_exif_tab) {
        echo '<div id="tab-exif" class="tab_content">';
        echo $this->lang('No EXIF data.');
        echo '</div>';
      }
      if ($this->show_gps_tab) {
        echo '<div id="tab-gps" class="tab_content">';
        echo $this->lang('No GPS data.');
        echo '</div>';
      }
    }
    echo '</div>';
    echo '</div>';
    echo $this->html_tail;
  }
  
  
  public function showVideo($f) {
    $f = $this->dir . '/' . urldecode($f);
    $f = $this->sanitizePath($f);
    if (isset($this->func_avfileplay) && $this->func_avfileplay !== NULL && is_callable($this->func_avfileplay)) {
        $group = call_user_func($this->func_avfileplay, $f);
    }
    header('Status: 404 Not Found');
  }
  
  
  public function showPassForm() {
    ?>
<div class="msgbox center">
<h2>This album is locked</h2>
<p>Please tell me who are you&hellip;</p>
<form method="post">
	<input type="hidden" name="fakce" value="addaccess" />
		<label for="fuser">Username:</label><br /> 
		<input type="text" name="fuser" id="fuser" /><br />
		<label for="fpass">Password:</label><br /> 
		<input type="password" name="fpass" id="fpass" /><br />
		<input type="submit" value="Grant me access" class="button" />
</form>
</div>
<?php
}
  
  
  public function showCreditPage() {
    echo str_replace('{title}', $this->galTitle, $this->html_head);
    echo '<div class="header"><h1>'.$this->lang('Settings, info, credits and license').'</h1></div>';

    echo '<div class="credits_content">';
    echo '<h2>Settings</h2>';
    $this->switch_lang();
    echo '</div>';

    ?>
<div class="credits_content">
  <p>This script is inspired by simplicity of brilliant MySQL client
    <a href="http://adminer.org">Adminer</a> from Jakub Vrána. It is completely in only one file. It is very simple to upload it anywhere to hosting and use it in few seconds. And why don't use this idea for web photo gallery?
  </p>

  <h2>Based on following projects:</h2>
  <ul>
    <li><a href="http://www.famfamfam.com/lab/icons/silk/">FamFamFam Silk Icons</a></li>
    <li><a href="https://github.com/blueimp/Gallery">blueimp Gallery</a></li>
    <li><a href="http://www.arwscripts.com/gallery-script-lite.html">Free Gallery Site Script</a> (image resampling)</li>
    <li><a href="http://ojw.dev.openstreetmap.org/StaticMap/">OSM Static maps API by OJW</a></li>
    <li><a href="http://pafciu17.dev.openstreetmap.org/">Pawel's OSM Static maps API (pafciu17)</a></li>
    <li><a href="http://adminer.org">Adminer</a></li>
  </ul>

  <h2>Info:</h2>
  <p>Author:
    Martin Šlapák [aka: <a href="http://gimli2.gipix.net">Gimli2</a>]
  </p>

  <h2>History:</h2>
  <p>You can see it in changelog.txt in github repo: <a href="https://github.com/gimli2/sigal/">https://github.com/gimli2/sigal/</a></p>

  <h2>License of SiGal:</h2>
  <p>Modified BSD License (<a href="http://www.xfree86.org/3.3.6/COPYRIGHT2.html#5">http://www.xfree86.org/3.3.6/COPYRIGHT2.html#5</a>)</p>
  <p>
  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
  </p>
  <ol>
    <li>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</li>
    <li>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</li>
    <li>The name of the author may not be used to endorse or promote products derived from this software without specific prior written permission.</li>
  </ol>
  <p>
  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  </p>
</div>
<?php
echo '<div class="footer">'.$this->lang('Navigation').': <a href="?">'.$this->lang('Back to album selection').'</a></div>';
    echo $this->html_tail;
  }
  
  private function sortItems($array, $callback_id) {
    $callback = $this->$callback_id;
    if (isset($callback) && $callback !== NULL && is_callable($callback)) {
      return call_user_func($callback, $array);
    }
    return $array;
  }
  
  
  public function getAlbums($top = NULL) {
    if ($top===NULL) $top = $this->dir;
    if (isset($this->func_getalbums) && $this->func_getalbums !== NULL && is_callable($this->func_getalbums)) {
      $files = call_user_func($this->func_getalbums, $top, $this->exts);
      return $this->sortItems($files, 'func_sortalbums');
    }

    $files = glob($top.'/*');
    foreach($files as $k => $v) {
      if (is_dir($v)) {
        $files[$k] = $v;
      } else {
        unset($files[$k]);
      }
    }
    $files = $this->sortItems($files, 'func_sortalbums');
    return $files;
  }
  
  
   
  public function readLock($dir) {
    $abslockfname = $dir.'/'.$this->lockfname;
    $this->islocked = false;
    if (file_exists($abslockfname)) {
      $this->islocked = true;
      
      $this->validusers = file($abslockfname);
      
      foreach ($this->validusers as $key=>$val) {
        $this->validusers[$key] = trim($val);
      }
    }
  }
  
  
  public function getImages($dir) {
    
    $files = array();

    
    if (isset($this->func_scandir) && $this->func_scandir !== NULL && is_callable($this->func_scandir)) {
      $files = call_user_func($this->func_scandir, $dir);
    } else {
      $r = glob($dir.'/*');
      foreach($r as $file) {
        
        $ext = strtolower($this->getExt($file));
        if (in_array($ext, $this->exts) || is_dir($file)) $files[] = $file;
      }
    }
    
    $files = $this->sortItems($files, 'func_sortimages');
    return $files;
  }
  
  
  public function getAlbumTitleFile($album) {
    
    if (file_exists($album.'/'.$this->icotitlefname)) return $album.'/'.trim(file_get_contents($album.'/'.$this->icotitlefname));
    
    $files = glob($album.'/*');
    foreach($files as $file) {
      $ext = strtolower($this->getExt($file));
      if (in_array($ext, $this->extsIcon)) return $file;
    }
    
    return $this->defaultDirIcon;
  }
  
  public function downloadZippedImages() {
    $url = parse_url($_POST['imgalbum'],PHP_URL_QUERY); 
    $archive = urlencode(substr($url, 1 + strpos($url, '=')));
    $imgs = array();
    foreach ($_POST as $key=>$val) {
      if (preg_match('~img[0-9]{1,}~', $key)) {
        $imgs[] = $val;
      }
    }

    $zip = new ZipStream($archive.'.zip');
    $zip->addDirectory($archive);

    foreach ($imgs as $file) {
      if (is_file($file)) {
        $zip->addLargeFile($file, $archive."/".basename($file), filectime($file));
      }
    }

    
    $data  = $this->lang('Downloaded').' '.date("Y-m-d H:i")." from ".$_POST['imgalbum']."\r\n--\r\n";
    $data .= 'Simple gallery script SiGal: http://gimli2.gipix.net/sigal/ '."\r\n";
    $zip->addFile($data, $archive."/readme.txt");

    return $zip->finalize();
  }
  
  
  public function makeThumbImage($file) {
    $f = $this->dir . '/' . $this->sanitizePath(urldecode($file));
    $ext = strtolower($this->getExt($f));
    if (file_exists($f) && in_array($ext, $this->extsIcon)) {
      $thumb = $this->resizeImage($f, $this->thumb_x);
      header('Location: '.$thumb);
      header('Content-type: image/jpeg');
      die();
    }
    header('Status: 404 Not Found');
    die();
  }
  
  
  public function makeMiddleImage($file) {
    $f = $this->dir . '/' . $this->sanitizePath(urldecode($file));
    $ext = strtolower($this->getExt($f));
    if (file_exists($f) && in_array($ext, $this->extsIcon)) {
      $middle = $this->resizeImage($f, $this->middle_x);
      header('Location: '.$middle);
      die();
    }
    header('Status: 404 Not Found');
    die();
  }
  
  
  private function isAccessible() {
    if (!isset($_SESSION['givenaccess'])) $_SESSION['givenaccess'] = array();
    
    foreach ($_SESSION['givenaccess'] as $user) {
      
      foreach ($this->validusers as $valid) {
         if ($user == $valid) return true;
      }
    }
    return false;
  }
  
  
  private function sanitizePath($p) {
    $p = trim($p);  
    $p = str_replace('..','',$p);   
    $p = str_replace('*','',$p);     
    $p = str_replace('://','',$p);     
    return $p;
  }
  
  
  private function getExt($file) {
    return substr($file,strrpos($file, '.')+1);
  }
  
  
  
  private function getMimeType($file) {
    
    
    
    $mime = $this->defaultMime;
    if (function_exists('mime_content_type')) $mime = mime_content_type($file);
    return $mime;
  }
  
  private function getCacheDir($md5) {
    return $this->cache.'/'.substr($md5,0,1).'/'.substr($md5,1,1).'/';
  }
  
  
  private function getMiddleName($file) {
    
    $ext = strtolower($this->getExt($file));
    if (in_array($ext, $this->extsIcon) && !in_array($ext, $this->extsVideo)) {
      $md5 = MD5($file.$this->middle_x);
      $targetDir = $this->getCacheDir($md5);
      $targetImagePath = $targetDir.$md5.".jpg";
      return $targetImagePath;
    }
    
    return $this->defaultIcon;
  }
  
  
  private function getThumbName($file) {
    
    if ($file === $this->defaultIcon) return $file;
    if ($file === $this->defaultDirIcon) return $file;
    
    $ext = strtolower($this->getExt($file));
    if (in_array($ext, $this->extsIcon)) {
      $md5 = MD5($file.$this->thumb_x);
      $targetDir = $this->getCacheDir($md5);
      $targetImagePath = $targetDir.$md5.".jpg";
      return $targetImagePath;
    }
    
    return $this->defaultIcon;
  }
  
  
  private function getImageTitle($file){
    $bn = basename($file);
    $elipse = (strlen($bn) > $this->imgTitleLen) ? '&hellip;':'';
    return '<h2 title="'.$bn.'">'.substr($bn, 0, $this->imgTitleLen).$elipse.'</h2>';
  }
  
  
  private function getAlbumTitle($file){
    $bn = $this->basepathname($file);

    if (isset($this->func_albumname) && $this->func_albumname !== NULL && is_callable($this->func_albumname)) {
      $title = call_user_func($this->func_albumname, $bn);
    } else {
      $patterns = array('~(19|20)(\d{2})-(\d{1,2})-(\d{1,2})_(.*)~si',
                        '~(19|20)(\d{2})-(\d{1,2})-(\d{1,2})-(\d{1,2})_(.*)~si');
      $replacements = array('\5 (\4. \3. \1\2)',
                            '\6 (\4-\5. \3. \1\2)');
      $bn = preg_replace($patterns, $replacements , $bn);
      $elipse = (strlen($bn) > $this->imgTitleLen) ? '&hellip;':'';
      $title = substr($bn, 0, $this->imgTitleLen).$elipse;
    }
    return '<h2 title="'.$bn.'">'.$title.'</h2>';
  }
  
  
  private function hasGPSData($exif) {
    return (isset($exif['GPSLatitude']) && isset($exif['GPSLongitude']));
  }
  
  
  private function getGPSLatLon($exif) {
    if (isset($exif['GPSLatitude']) && isset($exif['GPSLongitude'])) {
      $lat = $exif['GPSLatitude'];
      $lon = $exif['GPSLongitude'];
      list($cit,$jmen) = explode('/', $lat[0]);
      if ($jmen == 0) return array(0,0);
      $gpslat = $cit/$jmen;
      list($cit,$jmen) = explode('/', $lat[1]);
      if ($jmen == 0) return array(0,0);
      $gpslat += $cit/($jmen*60);
      list($cit,$jmen) = explode('/', $lat[2]);
      if ($jmen == 0) return array(0,0);
      $gpslat += $cit/($jmen*3600);
      list($cit,$jmen) = explode('/', $lon[0]);
      if ($jmen == 0) return array(0,0);
      $gpslon = $cit/$jmen;
      list($cit,$jmen) = explode('/', $lon[1]);
      if ($jmen == 0) return array(0,0);
      $gpslon += $cit/($jmen*60);
      list($cit,$jmen) = explode('/', $lon[2]);
      if ($jmen == 0) return array(0,0);
      $gpslon += $cit/($jmen*3600);
      if($exif['GPSLatitudeRef'] == 'S') { $gpslat = -$gpslat; }
      if($exif['GPSLongitudeRef'] == 'W') { $gpslon = -$gpslon; }
      return array($gpslat,$gpslon);
    } else {
      return array(0,0);
    }
  }
  
  
  
  private function getHumanGPS($lat, $lon) {
    $slat = ($lat > 0) ? 'N ' : 'S ';
    $whole = floor($lat);
    $slat .= $whole.'&deg;&nbsp;'.number_format(($lat-$whole)*60,3);
    $slon = ($lon > 0) ? 'E ' : 'W ';
    $whole = floor($lon);
    $slon .= $whole.'&deg;&nbsp;'.number_format(($lon-$whole)*60,3);
    return array('lat'=>$slat, 'lon'=>$slon);
  }
  
  
  public function resizeImage($path, $max_x) {
    $sourceImagePath = $path;
    $md5 = MD5($path.$max_x);
    $targetDir = $this->getCacheDir($md5);
    $targetImagePath = $targetDir.$md5.".jpg";
    $targetImageTempPath = $targetDir.$md5."-tmp.jpg";
    echo $targetDir;


    if (!file_exists($targetDir)) mkdir($targetDir, 0777, true);

    
    if(!file_exists($targetImagePath)) {
      $ext = strtolower($this->getExt($sourceImagePath));

      if(isset($this->func_videoimage) && $this->func_videoimage !== NULL && is_callable($this->func_videoimage) && in_array($ext, $this->extsVideo)) {
        $group = call_user_func($this->func_videoimage, $path, $targetImageTempPath);
        $sourceImagePath = $targetImageTempPath;
        $ext = 'jpg';
      }

      

      
      $originalImageSize = getimagesize($sourceImagePath);
      $original_x = $originalImageSize[0];
      $original_y = $originalImageSize[1];

      $square = 0;
      if($original_x > $original_y) {
        $max_y = 0;
        $max_x = $max_x;
      }
      else if($original_x < $original_y) {
        $max_y = $max_x;
        $max_x = 0;
      }
      else {
        $max_y = $max_x;
        $max_x = $max_x;
        $square = 1;
      }

      
      $state = 0;
      if($square == 1) {
        if($max_x == 0) $max_x = $max_y;
        elseif($max_y == 0) $max_y = $max_x;
      }
      if($max_x == 0) $state = 1;
      elseif($max_y == 0) $state = 2;
      if($state == 0) {
        $testratio = $max_x / $max_y;
        $origratio = $original_x / $original_y;
        if($origratio > $testratio) $state = 1;
        elseif($origratio < $testratio) $state = 2;
        else $state = 3;
      }

      
      if($state == 1) {
        
        if($square == 0) {
          if(($original_y > $max_y) || ($enlarge == 1)) $new_y = $max_y;
          else $new_y = $original_y;
          $new_x = round(($original_x / ($original_y / $new_y)), 0);
          $srcx = 0;
          $srcy = 0;
          $srcw = $original_x;
          $srch = $original_y;
        } else {
          if(($original_y > $max_y) || ($enlarge == 1)) $new_y = $max_y;
          else $new_y = $original_y;
          $new_x = $new_y;
          $tempratio = ($original_y / $new_y);
          $sectionwidth = $new_y * $tempratio;
          $srcy = 0;
          $srch = $original_y;
          $srcx = floor(($original_x - $sectionwidth) / 2);
          $srcw = floor($sectionwidth);
        }

      }

      elseif($state == 2) {
        
        if($square == 0) {
          if(($original_x > $max_x) || ($enlarge == 1)) $new_x = $max_x;
          else $new_x = $original_x;
          $new_y = round(($original_y / ($original_x / $new_x)), 0);
          $srcx = 0;
          $srcy = 0;
          $srcw = $original_x;
          $srch = $original_y;
        } else {
          if(($original_x > $max_x) || ($enlarge == 1)) $new_x = $max_x;
          else $new_x = $original_x;
          $new_y = $new_x;
          $tempratio = ($original_x / $new_x);
          $sectionheight = $new_x * $tempratio;
          $srcx = 0;
          $srcw = $original_x;
          $srcy = floor(($original_y - $sectionheight) / 2);
          $srch = floor($sectionheight);
        }
      }
      elseif($state == 3) {
        
        if($square == 0) {
          if(($original_x > $max_x) || ($enlarge == 1)) $new_x = $max_x;
          else $new_x = $original_x;
          $new_y = round(($original_y / ($original_x / $new_x)), 0);
          $srcx = 0;
          $srcy = 0;
          $srcw = $original_x;
          $srch = $original_y;
        } else {
          if(($original_x > $max_x) || ($enlarge == 1)) $new_x = $max_x;
          else $new_x = $original_x;
          $new_y = $new_x;
          $srcx = 0;
          $srcy = 0;
          $srcw = $original_x;
          $srch = $original_y;
        }
      }

      
      switch ($ext) {
        case 'jpg':
        case 'jpeg':
          $originalImage = imagecreatefromjpeg($sourceImagePath);
        break;
        case 'png':
          $originalImage = imagecreatefrompng($sourceImagePath);
        break;
        case 'gif':
          $originalImage = imagecreatefromgif($sourceImagePath);
        break;
        case 'bmp':
          $originalImage = imagecreatefromwbmp($sourceImagePath);
        break;
        default:
          $originalImage = imagecreatefromjpeg($sourceImagePath);
        break;
      }
      if($sourceImagePath === $targetImageTempPath) {
        unlink($sourceImagePath);
      }
      $newImage = imagecreatetruecolor($new_x, $new_y);
      imagecopyresampled($newImage, $originalImage, 0, 0, $srcx, $srcy, $new_x, $new_y, $srcw, $srch);
      imagejpeg($newImage, $targetImagePath, $this->cache_image_quality);
      imagedestroy($newImage);
      imagedestroy($originalImage);

    }

    
    $imageSize = getimagesize($targetImagePath);
    return $targetImagePath;
  }
  
  
  function cookie($name, $value, $lifetime = 2592000) { 
    $HTTPS = isset($_SERVER["HTTPS"]) && strcasecmp($_SERVER["HTTPS"], "off");
    $params = array(
      $name,
      (preg_match("~\n~", $value) ? "" : $value), 
      ($lifetime ? time() + $lifetime : 0),
      preg_replace('~\\?.*~', '', $_SERVER["REQUEST_URI"]),
      "",
      $HTTPS
    );
    if (version_compare(PHP_VERSION, '5.2.0') >= 0) {
      $params[] = true; 
    }
    return call_user_func_array('setcookie', $params);
  }
  
  
  function lang($idf, $number = null) {
    global $translations;
    
    $translations_lang = $translations[$this->LANG];
    $translation = (isset($translations_lang[$idf]) ? $translations_lang[$idf] : $idf);
    if (is_array($translation)) {
      $pos = ($number == 1 ? 0
        : ($this->LANG == 'cs' || $this->LANG == 'sk' ? ($number && $number < 5 ? 1 : 2) 
        : ($this->LANG == 'fr' ? (!$number ? 0 : 1) 
        : ($this->LANG == 'pl' ? ($number % 10 > 1 && $number % 10 < 5 && $number / 10 % 10 != 1 ? 1 : 2) 
        : ($this->LANG == 'sl' ? ($number % 100 == 1 ? 0 : ($number % 100 == 2 ? 1 : ($number % 100 == 3 || $number % 100 == 4 ? 2 : 3))) 
        : ($this->LANG == 'lt' ? ($number % 10 == 1 && $number % 100 != 11 ? 0 : ($number % 10 > 1 && $number / 10 % 10 != 1 ? 1 : 2)) 
        : ($this->LANG == 'ru' || $this->LANG == 'sr' || $this->LANG == 'uk' ? ($number % 10 == 1 && $number % 100 != 11 ? 0 : ($number % 10 > 1 && $number % 10 < 5 && $number / 10 % 10 != 1 ? 1 : 2)) 
        : 1
      ))))))); 
      $translation = $translation[$pos];
    }
    $args = func_get_args();
    array_shift($args);
    $format = str_replace("%d", "%s", $translation);
    if ($format != $translation) {
      $args[0] = $this->format_number($number);
    }
    return vsprintf($format, $args);
  }
  
  
  function format_number($val) {
    return strtr(number_format($val, 0, ".", $this->lang(',')), preg_split('~~u', $this->lang('0123456789'), -1, PREG_SPLIT_NO_EMPTY));
  }
  
  function detect_lang() {
    $this->LANG = "en";
    if (isset($_COOKIE["sigal_lang"]) && isset($this->langs[$_COOKIE["sigal_lang"]])) {
      $this->cookie("sigal_lang", $_COOKIE["sigal_lang"]);
      $this->LANG = $_COOKIE["sigal_lang"];
    } else {
      $accept_language = array();
      $browserLang = (isset($_SERVER["HTTP_ACCEPT_LANGUAGE"])) ? $_SERVER["HTTP_ACCEPT_LANGUAGE"] : '';
      preg_match_all('~([-a-z]+)(;q=([0-9.]+))?~', str_replace("_", "-", strtolower($browserLang)), $matches, PREG_SET_ORDER);
      foreach ($matches as $match) {
        $accept_language[$match[1]] = (isset($match[3]) ? $match[3] : 1);
      }
      arsort($accept_language);
      foreach ($accept_language as $key => $q) {
        if (isset($this->langs[$key])) {
          $this->LANG = $key;
          break;
        }
        $key = preg_replace('~-.*~', '', $key);
        if (!isset($accept_language[$key]) && isset($this->langs[$key])) {
          $this->LANG = $key;
          break;
        }
      }
    }
    return $this->LANG;
  }
  
  function switch_lang() {
    echo "<form action='' method='post'>\n<div id='lang'>";
    echo $this->lang('Language') . ": " . html_select("lang", $this->langs, $this->LANG, "this.form.submit();");
    echo " <input type='submit' value='" . $this->lang('Use') . "' class='hidden'>\n";
    echo "</div>\n</form>\n";
  }
  
  
  function remove_from_uri($param = "") {
    return substr(preg_replace("~(?<=[?&])($param" . (SID ? "" : "|" . session_name()) . ")=[^&]*&~", '', "$_SERVER[REQUEST_URI]&"), 0, -1);
  }
  
  
  
  
}



class ZipStream {
    const VERSION = 1.38;

    const ZIP_LOCAL_FILE_HEADER = "\x50\x4b\x03\x04"; 
    const ZIP_CENTRAL_FILE_HEADER = "\x50\x4b\x01\x02"; 
    const ZIP_END_OF_CENTRAL_DIRECTORY = "\x50\x4b\x05\x06\x00\x00\x00\x00"; 

    const EXT_FILE_ATTR_DIR = "\x10\x00\xFF\x41";
    const EXT_FILE_ATTR_FILE = "\x00\x00\xFF\x81";

    const ATTR_VERSION_TO_EXTRACT = "\x14\x00"; 
    const ATTR_MADE_BY_VERSION = "\x1E\x03"; 

    private $zipMemoryThreshold = 1048576; 

    private $zipComment = null;
    private $cdRec = array(); 
    private $offset = 0;
    private $isFinalized = FALSE;
    private $addExtraField = TRUE;

    private $streamChunkSize = 16384; 
    private $streamFilePath = null;
    private $streamTimeStamp = null;
    private $streamComment = null;
    private $streamFile = null;
    private $streamData = null;
    private $streamFileLength = 0;

    
    function __construct($archiveName = "", $contentType = "application/zip") {
        if (!function_exists('sys_get_temp_dir')) {
            die ("ERROR: ZipStream " . self::VERSION . " requires PHP version 5.2.1 or above.");
        }

        $headerFile = null;
        $headerLine = null;
        if (!headers_sent($headerFile, $headerLine) or die("<p><strong>Error:</strong> Unable to send file $archiveName. HTML Headers have already been sent from <strong>$headerFile</strong> in line <strong>$headerLine</strong></p>")) {
            if ((ob_get_contents() === FALSE || ob_get_contents() == '') or die("\n<p><strong>Error:</strong> Unable to send file <strong>$archiveName.epub</strong>. Output buffer contains the following text (typically warnings or errors):<br>" . ob_get_contents() . "</p>")) {
                if (ini_get('zlib.output_compression')) {
                    ini_set('zlib.output_compression', 'Off');
                }

                header('Pragma: public');
                header("Last-Modified: " . gmdate("D, d M Y H:i:s T"));
                header("Expires: 0");
                header("Accept-Ranges: bytes");
                
                header("Content-Type: " . $contentType);
                header('Content-Disposition: attachment; filename="' . $archiveName . '";');
                header("Content-Transfer-Encoding: binary");
                flush();
            }
        }
    }

    function __destruct() {
        $this->isFinalized = TRUE;
        $this->cdRec = null;
        exit;
    }

    
    function setExtraField($setExtraField = TRUE) {
        $this->addExtraField = ($setExtraField === TRUE);
    }

    
    public function setComment($newComment = null) {
        if ($this->isFinalized) {
            return FALSE;
        }
        $this->zipComment = $newComment;

        return TRUE;
    }

    
    public function addDirectory($directoryPath, $timestamp = 0, $fileComment = null) {
        if ($this->isFinalized) {
            return FALSE;
        }

        $directoryPath = str_replace("\\", "/", $directoryPath);
        $directoryPath = rtrim($directoryPath, "/");

        if (strlen($directoryPath) > 0) {
            $this->buildZipEntry($directoryPath.'/', $fileComment, "\x00\x00", "\x00\x00", $timestamp, "\x00\x00\x00\x00", 0, 0, self::EXT_FILE_ATTR_DIR);
            return TRUE;
        }
        return FALSE;
    }

    
    public function addFile($data, $filePath, $timestamp = 0, $fileComment = null, $compress = TRUE) {
        if ($this->isFinalized) {
            return FALSE;
        }

        if (is_resource($data) && get_resource_type($data) == "stream") {
            $this->addLargeFile($data, $filePath, $timestamp, $fileComment);
            return FALSE;
        }

        $gzData = "";
        $gzType = "\x08\x00"; 
        $gpFlags = "\x00\x00"; 
        $dataLength = strlen($data);
        $fileCRC32 = pack("V", crc32($data));

        if ($compress) {
            $gzTmp = gzcompress($data);
            $gzData = substr(substr($gzTmp, 0, strlen($gzTmp) - 4), 2); 
            
            $gzLength = strlen($gzData);
        } else {
            $gzLength = $dataLength;
        }

        if ($gzLength >= $dataLength) {
            $gzLength = $dataLength;
            $gzData = $data;
            $gzType = "\x00\x00"; 
            $gpFlags = "\x00\x00"; 
        }

        $this->buildZipEntry($filePath, $fileComment, $gpFlags, $gzType, $timestamp, $fileCRC32, $gzLength, $dataLength, self::EXT_FILE_ATTR_FILE);

        print ($gzData);

        return TRUE;
    }

    
    public function addDirectoryContent($realPath, $zipPath, $recursive = TRUE, $followSymlinks = TRUE, &$addedFiles = array()) {
        if (file_exists($realPath) && !isset($addedFiles[realpath($realPath)])) {
            if (is_dir($realPath)) {
                $this->addDirectory($zipPath);
            }

            $addedFiles[realpath($realPath)] = $zipPath;

            $iter = new DirectoryIterator($realPath);
            foreach ($iter as $file) {
                if ($file->isDot()) {
                    continue;
                }
                $newRealPath = $file->getPathname();
                $newZipPath = self::pathJoin($zipPath, $file->getFilename());

                if (file_exists($newRealPath) && ($followSymlinks === TRUE || !is_link($newRealPath))) {
                    if ($file->isFile()) {
                        $addedFiles[realpath($newRealPath)] = $newZipPath;
                        $this->addLargeFile($newRealPath, $newZipPath);
                    } else if ($recursive === TRUE) {
                        $this->addDirectoryContent($newRealPath, $newZipPath, $recursive);
                    } else {
                        $this->addDirectory($zipPath);
                    }
                }
            }
        }
    }

    
    public function addLargeFile($dataFile, $filePath, $timestamp = 0, $fileComment = null)   {
        if ($this->isFinalized) {
            return FALSE;
        }

        if (is_string($dataFile) && is_file($dataFile)) {
            $this->processFile($dataFile, $filePath, $timestamp, $fileComment);
        } else if (is_resource($dataFile) && get_resource_type($dataFile) == "stream") {
            $fh = $dataFile;
            $this->openStream($filePath, $timestamp, $fileComment);

            while (!feof($fh)) {
                $this->addStreamData(fread($fh, $this->streamChunkSize));
            }
            $this->closeStream($this->addExtraField);
        }
        return TRUE;
    }

    
    public function openStream($filePath, $timestamp = 0, $fileComment = null)   {
        if (!function_exists('sys_get_temp_dir')) {
            die ("ERROR: Zip " . self::VERSION . " requires PHP version 5.2.1 or above if large files are used.");
        }

        if ($this->isFinalized) {
            return FALSE;
        }

        if (strlen($this->streamFilePath) > 0) {
            closeStream();
        }

        $this->streamFile = tempnam(sys_get_temp_dir(), 'ZipStream');
        $this->streamData = fopen($this->streamFile, "wb");
        $this->streamFilePath = $filePath;
        $this->streamTimestamp = $timestamp;
        $this->streamFileComment = $fileComment;
        $this->streamFileLength = 0;

        return TRUE;
    }

    
    public function addStreamData($data) {
        if ($this->isFinalized || strlen($this->streamFilePath) == 0) {
            return FALSE;
        }

        $length = fwrite($this->streamData, $data, strlen($data));
        if ($length != strlen($data)) {
            die ("<p>Length mismatch</p>\n");
        }
        $this->streamFileLength += $length;

        return $length;
    }

    
    public function closeStream() {
        if ($this->isFinalized || strlen($this->streamFilePath) == 0) {
            return FALSE;
        }

        fflush($this->streamData);
        fclose($this->streamData);

        $this->processFile($this->streamFile, $this->streamFilePath, $this->streamTimestamp, $this->streamFileComment);

        $this->streamData = null;
        $this->streamFilePath = null;
        $this->streamTimestamp = null;
        $this->streamFileComment = null;
        $this->streamFileLength = 0;

        
        unlink($this->streamFile);

        $this->streamFile = null;

        return TRUE;
    }

    private function processFile($dataFile, $filePath, $timestamp = 0, $fileComment = null) {
        if ($this->isFinalized) {
            return FALSE;
        }

        $tempzip = tempnam(sys_get_temp_dir(), 'ZipStream');

        $zip = new ZipArchive;
        if ($zip->open($tempzip) === TRUE) {
            $zip->addFile($dataFile, 'file');
            $zip->close();
        }

        $file_handle = fopen($tempzip, "rb");
        $stats = fstat($file_handle);
        $eof = $stats['size']-72;

        fseek($file_handle, 6);

        $gpFlags = fread($file_handle, 2);
        $gzType = fread($file_handle, 2);
        fread($file_handle, 4);
        $fileCRC32 = fread($file_handle, 4);
        $v = unpack("Vval", fread($file_handle, 4));
        $gzLength = $v['val'];
        $v = unpack("Vval", fread($file_handle, 4));
        $dataLength = $v['val'];

        $this->buildZipEntry($filePath, $fileComment, $gpFlags, $gzType, $timestamp, $fileCRC32, $gzLength, $dataLength, self::EXT_FILE_ATTR_FILE);

        fseek($file_handle, 34);
        $pos = 34;

        while (!feof($file_handle) && $pos < $eof) {
            $datalen = $this->streamChunkSize;
            if ($pos + $this->streamChunkSize > $eof) {
                $datalen = $eof-$pos;
            }
            echo fread($file_handle, $datalen);
            $pos += $datalen;
            flush();
        }

        fclose($file_handle);
        unlink($tempzip);
    }

    
    public function finalize() {
        if (!$this->isFinalized) {
            if (strlen($this->streamFilePath) > 0) {
                $this->closeStream();
            }

            $cdRecSize = pack("v", sizeof($this->cdRec));

            $cd = implode("", $this->cdRec);
            print($cd);
            print(self::ZIP_END_OF_CENTRAL_DIRECTORY);
            print($cdRecSize.$cdRecSize);
            print(pack("VV", strlen($cd), $this->offset));
            if (!empty($this->zipComment)) {
                print(pack("v", strlen($this->zipComment)));
                print($this->zipComment);
            } else {
                print("\x00\x00");
            }

            flush();

            $this->isFinalized = TRUE;
            $cd = null;
            $this->cdRec = null;

            return TRUE;
        }
        return FALSE;
    }

    
    private function getDosTime($timestamp = 0) {
        $timestamp = (int)$timestamp;
        $oldTZ = @date_default_timezone_get();
        date_default_timezone_set('UTC');
        $date = ($timestamp == 0 ? getdate() : getdate($timestamp));
        date_default_timezone_set($oldTZ);
        if ($date["year"] >= 1980) {
            return pack("V", (($date["mday"] + ($date["mon"] << 5) + (($date["year"]-1980) << 9)) << 16) |
                    (($date["seconds"] >> 1) + ($date["minutes"] << 5) + ($date["hours"] << 11)));
        }
        return "\x00\x00\x00\x00";
    }

    
    private function buildZipEntry($filePath, $fileComment, $gpFlags, $gzType, $timestamp, $fileCRC32, $gzLength, $dataLength, $extFileAttr) {
        $filePath = str_replace("\\", "/", $filePath);
        $fileCommentLength = (empty($fileComment) ? 0 : strlen($fileComment));
        $timestamp = (int)$timestamp;
        $timestamp = ($timestamp == 0 ? time() : $timestamp);

        $dosTime = $this->getDosTime($timestamp);
        $tsPack = pack("V", $timestamp);

        $ux = "\x75\x78\x0B\x00\x01\x04\xE8\x03\x00\x00\x04\x00\x00\x00\x00";

        if (!isset($gpFlags) || strlen($gpFlags) != 2) {
            $gpFlags = "\x00\x00";
        }

        $isFileUTF8 = mb_check_encoding($filePath, "UTF-8") && !mb_check_encoding($filePath, "ASCII");
        $isCommentUTF8 = !empty($fileComment) && mb_check_encoding($fileComment, "UTF-8") && !mb_check_encoding($fileComment, "ASCII");
        if ($isFileUTF8 || $isCommentUTF8) {
            $flag = 0;
            $gpFlagsV = unpack("vflags", $gpFlags);
            if (isset($gpFlagsV['flags'])) {
                $flag = $gpFlagsV['flags'];
            }
            $gpFlags = pack("v", $flag | (1 << 11));
        }
        
        $header = $gpFlags . $gzType . $dosTime. $fileCRC32
        . pack("VVv", $gzLength, $dataLength, strlen($filePath)); 

        $zipEntry  = self::ZIP_LOCAL_FILE_HEADER;
        $zipEntry .= self::ATTR_VERSION_TO_EXTRACT;
        $zipEntry .= $header;
        $zipEntry .= $this->addExtraField ? "\x1C\x00" : "\x00\x00"; 
        $zipEntry .= $filePath; 
        
        if ($this->addExtraField) {
            $zipEntry .= "\x55\x54\x09\x00\x03" . $tsPack . $tsPack . $ux;
        }

        print($zipEntry);

        $cdEntry  = self::ZIP_CENTRAL_FILE_HEADER;
        $cdEntry .= self::ATTR_MADE_BY_VERSION;
        $cdEntry .= ($dataLength === 0 ? "\x0A\x00" : self::ATTR_VERSION_TO_EXTRACT);
        $cdEntry .= $header;
        $cdEntry .= $this->addExtraField ? "\x18\x00" : "\x00\x00"; 
        $cdEntry .= pack("v", $fileCommentLength); 
        $cdEntry .= "\x00\x00"; 
        $cdEntry .= "\x00\x00"; 
        $cdEntry .= $extFileAttr; 
        $cdEntry .= pack("V", $this->offset); 
        $cdEntry .= $filePath; 
        
        if ($this->addExtraField) {
            $cdEntry .= "\x55\x54\x05\x00\x03" . $tsPack . $ux;
        }

        if (!empty($fileComment)) {
            $cdEntry .= $fileComment; 
        }

        $this->cdRec[] = $cdEntry;
        $this->offset += strlen($zipEntry) + $gzLength;
    }

    
    public static function pathJoin($dir, $file) {
        if (empty($dir) || empty($file)) {
            return self::getRelativePath($dir . $file);
        }
        return self::getRelativePath($dir . '/' . $file);
    }

    
    public static function getRelativePath($path) {
        $path = preg_replace("#/+\.?/+#", "/", str_replace("\\", "/", $path));
        $dirs = explode("/", rtrim(preg_replace('#^(?:\./)+#', '', $path), '/'));

        $offset = 0;
        $sub = 0;
        $subOffset = 0;
        $root = "";

        if (empty($dirs[0])) {
            $root = "/";
            $dirs = array_splice($dirs, 1);
        } else if (preg_match("#[A-Za-z]:#", $dirs[0])) {
            $root = strtoupper($dirs[0]) . "/";
            $dirs = array_splice($dirs, 1);
        }

        $newDirs = array();
        foreach ($dirs as $dir) {
            if ($dir !== "..") {
                $subOffset--;
                $newDirs[++$offset] = $dir;
            } else {
                $subOffset++;
                if (--$offset < 0) {
                    $offset = 0;
                    if ($subOffset > $sub) {
                        $sub++;
                    }
                }
            }
        }

        if (empty($root)) {
            $root = str_repeat("../", $sub);
        }
        return $root . implode("/", array_slice($newDirs, 0, $offset));
    }
}




function h($string) {
	return str_replace("\0", "&#0;", htmlspecialchars($string, ENT_QUOTES, 'utf-8'));
}


function html_select($name, $options, $value = "", $onchange = true) {
	if ($onchange) {
		return "<select name='" . h($name) . "'" . (is_string($onchange) ? ' onchange="' . h($onchange) . '"' : "") . ">" . optionlist($options, $value) . "</select>";
	}
	$return = "";
	foreach ($options as $key => $val) {
		$return .= "<label><input type='radio' name='" . h($name) . "' value='" . h($key) . "'" . ($key == $value ? " checked" : "") . ">" . h($val) . "</label>";
	}
	return $return;
}


function optionlist($options, $selected = null, $use_keys = false) {
	$return = "";
	foreach ($options as $k => $v) {
		$opts = array($k => $v);
		if (is_array($v)) {
			$return .= '<optgroup label="' . h($k) . '">';
			$opts = $v;
		}
		foreach ($opts as $key => $val) {
			$return .= '<option' . ($use_keys || is_string($key) ? ' value="' . h($key) . '"' : '') . (($use_keys || is_string($key) ? (string) $key : $val) === $selected ? ' selected' : '') . '>' . h($val);
		}
		if (is_array($v)) {
			$return .= '</optgroup>';
		}
	}
	return $return;
}





  
  foreach (glob('lang/*.lang.php') as $filename) {
    include $filename;
  }
  $gg = new Sigal();

  
  
  $conf = array();
  if (file_exists('./config.php')) include './config.php';
  $kws = array(
    'dir', 'cache', 'defaultIcon', 'icotitlefname', 'lockfname', 'thumb_x', 'thumb_y', 'middle_x', 'imgTitleLen', 'galTitle', 'legal_notice', 'date_format',
    'enable_mass_download', 'show_exif_tab', 'show_gps_tab', 'cache_image_quality', 
    'func_sortimages', 'func_sortalbums', 'func_sortgroups', 'func_scandir', 'func_albumname', 'func_groupname', 'func_getalbums', 'func_videoimage', 'func_avfileplay'
  );
  foreach ($kws as $item) {
    if (isset($conf[$item])) $gg->$item = $conf[$item];
  }
  
  
  if(isset($gg->func_videoimage) && $gg->func_videoimage!=='') {
    $gg->extsIcon = array_merge($gg->extsIcon, $gg->extsVideo);
  }
  
  if (isset($_POST["lang"])) {
    $gg->cookie("sigal_lang", $_POST["lang"]);
    $loc = $gg->remove_from_uri();
    $loc = ($loc !== '') ? $loc : '.';
    header("Location: ".$loc);
    die();
  }
  
  if (isset($_GET['credits'])) {
    $gg->showCreditPage();
    die();
  }
  
  if (isset($_GET['dlselected'])) {
    $gg->downloadZippedImages();
  }
  
  if (isset($_GET['mkmid'])) {
    $gg->makeMiddleImage($_GET['mkmid']);
  }
  
  if (isset($_GET['mkthumb'])) {
    $gg->makeThumbImage($_GET['mkthumb']);
  }
  
  if (isset($_GET['foto'])) {
    session_start();
    if (isset($_POST['fakce']) && $_POST['fakce']==='addaccess') $gg->addAccess();
    $gg->showImage($_GET['foto']);
    die();
  }
  
  if (isset($_GET['alb']) && $_GET['alb']!=='') {
    session_start();
    if (isset($_POST['fakce']) && $_POST['fakce']==='addaccess') $gg->addAccess();
    $gg->showAlbum($_GET['alb']);
    die();
  }
  
  if (isset($_GET['avfile'])) {
    $gg->showVideo($_GET['avfile']);
    die();
  }
  
  
  if (isset($_GET['static'])) {
    header('Location: index.min.php?static='.$_GET['static']);
  }
  
  $gg->showGallery();
